modeltype PCM_ALLOC uses 'http://sdq.ipd.uka.de/PalladioComponentModel/Allocation/5.0';
modeltype PCM_REP uses 'http://sdq.ipd.uka.de/PalladioComponentModel/Repository/5.0';
modeltype PCM_SEFF uses 'http://sdq.ipd.uka.de/PalladioComponentModel/SEFF/5.0';
modeltype PCM_SYS uses 'http://sdq.ipd.uka.de/PalladioComponentModel/System/5.0';
modeltype PCM_RES_ENV uses 'http://sdq.ipd.uka.de/PalladioComponentModel/ResourceEnvironment/5.0';
modeltype PCM_RES_TYPE uses 'http://sdq.ipd.uka.de/PalladioComponentModel/ResourceType/5.0';
modeltype PCM_USAGE uses 'http://sdq.ipd.uka.de/PalladioComponentModel/UsageModel/5.0';
modeltype PCM_FEATURE_CONF uses 'http://sdq.ipd.uka.de/FeatureConfig/2.0';
modeltype PCM_FEATURE_MOD uses 'http://sdq.ipd.uka.de/FeatureModel/2.0';
modeltype PCM_COMP uses 'http://sdq.ipd.uka.de/PalladioComponentModel/Core/Composition/5.0';

/**
 * QVTO library for the operation signature registry.
 *
 * @author Benjamin Klatt
 */
library OperationSignatureRegistry();


/** 
 * A registry to link event types with created operation signatures and interfaces.
 *
 * This registry manages operation signatures that are created for 
 * the event types and the parameters need to be created in the operation signatures.
 * To be able to map those operation signatures to the appropriate ExternalCallActions 
 * later on, this registry contains key value pairs with a key build out of
 * the source role and the event type and the associated OperationSignature.
 *
 * Furthermore, this registry provides helpers to access the signatures based on 
 * indirect elements like getting the operation based on a SourceRole by using the 
 * EventGroup referenced by the SourceRole.
 *
 * Note: In the QVTO specification there is a datatype named Dictionary that should 
 *			be used for such a purpose, but this is not available yet in the 
 *			eclipse qvto implementation, yet.
 * 
 * [SourceRole.id+EventType.id => OperationSignature]
 *
 * Refer to getCombinedIdentifier() for more detailes about the key generation
 */	
property signatureRegistry : Set(Tuple(key:String,signature:OperationSignature)) = Set{};

/**
 * Register a signature
 * @param eventGroup 	The EventGroup to use in the register key
 * @param eventType		The EventType to use in the register key
 * @param signature		The OperationSignature to register
 */
helper registerSignature(	eventGroup : EventGroup, 
							eventType : EventType,
							signature : OperationSignature){
	var registryKey : String = getCombinedIdentifier(eventGroup,eventType);
	var entry : Tuple(key:String,signature:OperationSignature) = Tuple {
		key = registryKey,
		signature = signature
	};
	signatureRegistry += Set{entry};
	return;
}


/**
 * Find a signature in the signature registry
 * @param eventGroup 	The event group to be used for the key
 * @param eventType		The event type to be used for the key
 * @return The OperationSignature found in the registry
 */
query findSignature(	eventGroup : EventGroup, 
						eventType : EventType) : OperationSignature {	
		var searchKey : String = getCombinedIdentifier(eventGroup,eventType);
		return signatureRegistry->selectOne(s|s.key = searchKey).signature;
}


/**
 * Find the Operation interface for a source role
 * The search is done based on the event type of the source event group and the 
 * operation signature registry.
 * @param sourceRole The source role to search with
 * @return The found operation interface
 */
query 	findOperationInterface(sourceRole: SourceRole) : OperationInterface {
	var searchKey : String = getCombinedIdentifier(sourceRole.eventGroup__SourceRole,sourceRole.eventGroup__SourceRole.eventTypes__EventGroup->any(true));
	return signatureRegistry->selectOne(s|s.key = searchKey).signature.interface__OperationSignature;
}


/**
 * Find the Operation interface for a sink role
 * The search is done based on the event type of the sink event group and the 
 * operation signature registry.
 * @param sinkRole The sink role to search with
 * @return The found operation interface
 */
query 	findOperationInterface(sinkRole: SinkRole) : OperationInterface {
	var searchKey : String = getCombinedIdentifier(sinkRole.eventGroup__SinkRole,sinkRole.eventGroup__SinkRole.eventTypes__EventGroup->any(true));
	return signatureRegistry->selectOne(s|s.key = searchKey).signature.interface__OperationSignature;
}


/**
 * Get the combined identifier for a source role and event type pair.
 *
 * @param sourceRole 	The source role to use in the identifier
 * @param eventType		The event type to use in the identifier
 * @return The identifier build from the combined element ids
 */
helper getCombinedIdentifier(eventGroup : EventGroup,eventType : EventType) : String {
	return eventGroup.id + eventType.id; 
}