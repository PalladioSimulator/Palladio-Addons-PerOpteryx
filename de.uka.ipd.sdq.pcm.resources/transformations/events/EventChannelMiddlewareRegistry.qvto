modeltype PCM_ALLOC uses 'http://sdq.ipd.uka.de/PalladioComponentModel/Allocation/5.0';
modeltype PCM_REP uses 'http://sdq.ipd.uka.de/PalladioComponentModel/Repository/5.0';
modeltype PCM_SEFF uses 'http://sdq.ipd.uka.de/PalladioComponentModel/SEFF/5.0';
modeltype PCM_SYS uses 'http://sdq.ipd.uka.de/PalladioComponentModel/System/5.0';
modeltype PCM_RES_ENV uses 'http://sdq.ipd.uka.de/PalladioComponentModel/ResourceEnvironment/5.0';
modeltype PCM_RES_TYPE uses 'http://sdq.ipd.uka.de/PalladioComponentModel/ResourceType/5.0';
modeltype PCM_USAGE uses 'http://sdq.ipd.uka.de/PalladioComponentModel/UsageModel/5.0';
modeltype PCM_FEATURE_CONF uses 'http://sdq.ipd.uka.de/FeatureConfig/2.0';
modeltype PCM_FEATURE_MOD uses 'http://sdq.ipd.uka.de/FeatureModel/2.0';
modeltype PCM_COMP uses 'http://sdq.ipd.uka.de/PalladioComponentModel/Core/Composition/5.0';

/**
 * Transformation library for a registry of middleware components instantiated
 * event channels deployed in the system
 *
 * @author Benjamin Klatt
 */
library EventChannelMiddlewareRegistry;


/** 
 * A registry for middleware components per event channel.
 * This will link middleware components with the corresponding eventchannels
 *
 * Note: In the QVTO specification there is a datatype named Dictionary that should 
 *			be used for such a purpose, but this is not available yet in the 
 *			eclipse qvto implementation.
 * 
 * [component.id+signature.id => ResourceDemandingSEFF]
 *
 * Refer to getCombinedIdentifier() for more detailes about the key generation
 */	
property middlewareRegistry : Set(	Tuple(	key:String,
											channelSourceCommunicationContext : AssemblyContext,
											channelEventDistributionContext : AssemblyContext,
											channelSenderContext : AssemblyContext)) = Set{};

/**
 * Register a seff
 * @param channel The channel to register the elements for 
 * @param SourceCommunicationContext The middleware distribution preparation assembly context
 * @param eventDistributionContext The middleware assembly context
 * @param senderContext The middleware sender assembly context
 */
helper EventChannelMiddlewareRegistry_register(	channel: EventChannel,
												SourceCommunicationContext : AssemblyContext,
												eventDistributionContext : AssemblyContext,
												senderContext : AssemblyContext){
	var registryKey : String = EventChannelMiddlewareRegistry_getIdentifier(channel);
	var entry : Tuple(	key:String,
						channelSourceCommunicationContext : AssemblyContext,
						channelEventDistributionContext : AssemblyContext,
						channelSenderContext : AssemblyContext) = Tuple {
		key = registryKey,
		channelSourceCommunicationContext = SourceCommunicationContext,
		channelEventDistributionContext = eventDistributionContext,
		channelSenderContext = senderContext
	};
	middlewareRegistry += Set{entry};
	return;
}


/**
 * Find a seff in the seff registry
 * @param channel The channel to find the elements for 
 * @return The ResourceDemandingSEFF found in the registry
 */
query EventChannelMiddlewareRegistry_find(	channel: EventChannel) : Tuple(	key:String,
											channelSourceCommunicationContext : AssemblyContext,
											channelEventDistributionContext : AssemblyContext,
											channelSenderContext : AssemblyContext) {	
		var searchKey : String = EventChannelMiddlewareRegistry_getIdentifier(channel);
		return middlewareRegistry->selectOne(s|s.key = searchKey);
}


/**
 * Get the combined identifier for a component and signature pair.
 *
 * @param component 	The component to use in the identifier
 * @param signature		The signature to use in the identifier
 * @return The identifier build from the combined element ids
 */
helper EventChannelMiddlewareRegistry_getIdentifier(eventChannel : EventChannel) : String {
	return eventChannel.id; 
}