import Commons;
import OperationSignatureRegistry;

modeltype PCM_ALLOC uses 'http://sdq.ipd.uka.de/PalladioComponentModel/Allocation/5.0';
modeltype PCM_REP uses 'http://sdq.ipd.uka.de/PalladioComponentModel/Repository/5.0';
modeltype PCM_SEFF uses 'http://sdq.ipd.uka.de/PalladioComponentModel/SEFF/5.0';
modeltype PCM_SYS uses 'http://sdq.ipd.uka.de/PalladioComponentModel/System/5.0';
modeltype PCM_RES_ENV uses 'http://sdq.ipd.uka.de/PalladioComponentModel/ResourceEnvironment/5.0';
modeltype PCM_RES_TYPE uses 'http://sdq.ipd.uka.de/PalladioComponentModel/ResourceType/5.0';
modeltype PCM_USAGE uses 'http://sdq.ipd.uka.de/PalladioComponentModel/UsageModel/5.0';
modeltype PCM_FEATURE_CONF uses 'http://sdq.ipd.uka.de/FeatureConfig/2.0';
modeltype PCM_FEATURE_MOD uses 'http://sdq.ipd.uka.de/FeatureModel/2.0';
modeltype PCM_CORE uses 'http://sdq.ipd.uka.de/PalladioComponentModel/Core/5.0';
modeltype PCM_COMP uses 'http://sdq.ipd.uka.de/PalladioComponentModel/Core/Composition/5.0';
modeltype PCM_ENTITY uses 'http://sdq.ipd.uka.de/PalladioComponentModel/Core/Entity/5.0';
modeltype PCM_PARAM uses 'http://sdq.ipd.uka.de/PalladioComponentModel/Parameter/5.0';
modeltype PCM_STOEX uses 'http://sdq.ipd.uka.de/StochasticExpressions/1.0';

/**
 * Library with helpers to create elements
 *
 * @author Benjamin Klatt
 */
library VariableUtil;

/**
 * Create variable usage with a characterisation forward for all 
 * available characterization types. The referenced output parameter and the 
 * input parameter to read the characterisations from are the same parameter definition.
 *
 * This helper internally takes use of the helper to forwared different input and output
 * parameter definitions.
 *
 * @param parameter The parameter to be referenced by the variable usage
 * @return The set of variable usages
 */
helper VariableUtil_createVariableUsage(parameter : Parameter) : VariableUsage {
	return VariableUtil_createVariableUsage(parameter,parameter);
}
	
/**
 * Create variable usage with a characterisation forward for all 
 * available characterization types. The referenced output parameter and the 
 * input parameter to read the characterisations are specified seperatly.
 *
 *
 * @param inputParam 	The parameter to get the characterizations from
 * @param outputParam 	The parameter to be referenced by the variable usage
 * @return The set of variable usages
 */
helper VariableUtil_createVariableUsage(inputParameter : Parameter, outputParameter : Parameter) : VariableUsage {
	var variableReference : VariableReference = VariableUtil_createVariableReference(outputParameter);
	
	// prepare the list of characterizations to set
	var characterizations : Set(VariableCharacterisation) = Set{};
	Commons_getListOfVariableCharacterisationTypes()->forEach(type){
		var characterization := VariableUtil_createVariableCharacterisation(inputParameter,type);
		characterizations+= characterization;
	};
	
	// create the variable usage
	var usage := object VariableUsage {
		namedReference__VariableUsage := variableReference;
		variableCharacterisation_VariableUsage := characterizations;
	};
	
	// publish the variable usage to all characterisations
	characterizations->forEach(characterization) {
		characterization.variableUsage_VariableCharacterisation := usage;
	};
	
	return usage;
}


/**
 * Check the variable usages if all available characterizations are in represented.
 * If not, create them if a default value.
 * @param The variable usage to check
 */
helper VariableUtil_completeVariableCharacterizations(inout usage : VariableUsage) {
	
	Commons_getListOfVariableCharacterisationTypes()->forEach(type){
		if(usage.variableCharacterisation_VariableUsage->select(vc | vc.type = type)->size() = 0)
		then {
			var characterization := VariableUtil_createDefaultVariableCharacterisation(type);
			characterization.variableUsage_VariableCharacterisation := usage;
			usage.variableCharacterisation_VariableUsage += characterization;
		}
		endif;
	}
}

/**
 * Build the variable usages for all characterizations of all signature parameters.
 * @param signature The signature to handle all parameters for.
 * @return The set of VariableUsages
 */
helper VariableUtil_buildCompleteForwardingVariableUsageSet(signature : OperationSignature) : Set(VariableUsage) {
	
	var variableUsages : Set(VariableUsage) = Set{};
	
	// for each parameter add the complete set of variable usages
	signature.parameters__OperationSignature->forEach(parameter){
		variableUsages+= VariableUtil_createVariableUsage(parameter);
	};
	return variableUsages;
}

/**
 * Create a variable characterization for a typr with a default specification (0).
 * @param vcType The VariableCharacterisation type to build the characterisation for.
 * @return The prepared Characterisation.
 */
helper VariableUtil_createDefaultVariableCharacterisation(vcType : VariableCharacterisationType) : VariableCharacterisation {
	
	var characterisation := object VariableCharacterisation {
		type := vcType;
		specification_VariableCharacterisation := object PCMRandomVariable {
			specification := '0';
		}; 	
	};
	return characterisation;
}

/**
 * Create a variable reference for a parameter.
 * @param parameter The parameter to get the name of.
 * @return The prepared VariabelReference object
 */
helper VariableUtil_createVariableReference(parameter : Parameter) : VariableReference {
	var reference := object VariableReference {
		referenceName := parameter.parameterName;
	};
	return reference;
}


/**
 * Create a variable characterisation forwarding for a characterization type 
 * and the name of a provided parameter name.
 *
 * @param parameter The parameter to forward
 * @param characterization The characterisation to forward
 * @return The VariableCharacterization referencing a parameters characterization 
 */
helper VariableUtil_createVariableCharacterisation(parameter : Parameter, 
										characterisationType : VariableCharacterisationType) : VariableCharacterisation {
	var characterisation := object VariableCharacterisation {
		type := characterisationType;
		specification_VariableCharacterisation := object PCMRandomVariable {
			specification := parameter.parameterName + '.' + type.repr();
		};
	};
	return characterisation;
}