import Commons;
import SEFFUtil;
import SEFFRegistry;
import VariableUtil;

modeltype PCM_ALLOC uses 'http://sdq.ipd.uka.de/PalladioComponentModel/Allocation/5.0';
modeltype PCM_REP uses 'http://sdq.ipd.uka.de/PalladioComponentModel/Repository/5.0';
modeltype PCM_SEFF uses 'http://sdq.ipd.uka.de/PalladioComponentModel/SEFF/5.0';
modeltype PCM_SYS uses 'http://sdq.ipd.uka.de/PalladioComponentModel/System/5.0';
modeltype PCM_RES_ENV uses 'http://sdq.ipd.uka.de/PalladioComponentModel/ResourceEnvironment/5.0';
modeltype PCM_RES_TYPE uses 'http://sdq.ipd.uka.de/PalladioComponentModel/ResourceType/5.0';
modeltype PCM_USAGE uses 'http://sdq.ipd.uka.de/PalladioComponentModel/UsageModel/5.0';
modeltype PCM_FEATURE_CONF uses 'http://sdq.ipd.uka.de/FeatureConfig/2.0';
modeltype PCM_FEATURE_MOD uses 'http://sdq.ipd.uka.de/FeatureModel/2.0';
modeltype PCM_CORE uses 'http://sdq.ipd.uka.de/PalladioComponentModel/Core/5.0';
modeltype PCM_COMP uses 'http://sdq.ipd.uka.de/PalladioComponentModel/Core/Composition/5.0';
modeltype PCM_ENTITY uses 'http://sdq.ipd.uka.de/PalladioComponentModel/Core/Entity/5.0';
modeltype PCM_PARAM uses 'http://sdq.ipd.uka.de/PalladioComponentModel/Parameter/5.0';
modeltype PCM_STOEX uses 'http://sdq.ipd.uka.de/StochasticExpressions/1.0';

/**
 * Library with helpers to handle source port elements
 *
 * The operations in this section are all about the modification of
 * the original Source component
 *
 * @author Benjamin Klatt
 */
library Source;

/**
 * Create the ExternalCallAction for each EmitEventActions pointing to a specific SourceRole.
 *
 * An emit event action is only replaced if it's successor and predecessor are set. Otherwise
 * the newly created ExternalCallAction would be invalid.
 *
 * @param requiredRole The operation requred role the external call action should point to
 */
helper Source_transformEmitEventActions(	sourceRole: SourceRole, 
											requiredRole : OperationRequiredRole, 
											availableEmitEventActions : Set(EmitEventAction)) {
	
	// get the emit event actions currently pointing to the source role
	var emitEventActions := availableEmitEventActions->select(e | e.sourceRole__EmitEventAction = sourceRole and
																	e.predecessor_AbstractAction <> null and
																	e.successor_AbstractAction <> null);
	emitEventActions->forEach(emitEventAction) {
		Source_createExternalCallAction(emitEventAction,requiredRole,sourceRole);
	};
	return;
}

/**
 * Create an external call action for a emit event action
 * @param emitEventAction The emit event action to generate the external call for
 * @param operationRequiredRole The required role to point the external action to
 * @return The external call action placed instead of the the emit event action 
 */
helper Source_createExternalCallAction(	emitEventAction: EmitEventAction, 
										operationRequiredRole: OperationRequiredRole,
										sourceRole: SourceRole) : ExternalCallAction {
	// lookup the signature to link in the operaton signature registry
	var calledSignature := findSignature(	sourceRole.eventGroup__SourceRole,
											emitEventAction.eventType__EmitEventAction);
	
	var action := object ExternalCallAction {
		entityName := 'EmitEventTo'+emitEventAction.sourceRole__EmitEventAction.entityName;
		predecessor_AbstractAction := emitEventAction.predecessor_AbstractAction;
		successor_AbstractAction := emitEventAction.successor_AbstractAction;
		resourceDemandingBehaviour_AbstractAction := emitEventAction.resourceDemandingBehaviour_AbstractAction;
		inputVariableUsages__CallAction := emitEventAction.inputVariableUsages__CallAction;
		role_ExternalService := operationRequiredRole;
		calledService_ExternalService := calledSignature;
	};
	
	action.inputVariableUsages__CallAction->forEach(usage){
		VariableUtil_completeVariableCharacterizations(usage);
	};
	
	return action;
}