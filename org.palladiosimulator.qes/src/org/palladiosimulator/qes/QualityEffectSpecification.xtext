grammar org.palladiosimulator.qes.QualityEffectSpecification with org.eclipse.xtext.common.Terminals

generate qualityEffectSpecification "http://www.palladiosimulator.org/qes/QualityEffectSpecification"

Model:
    specifications+=QualityEffectSpecification (NL+ specifications+=QualityEffectSpecification)* NL+;

QualityEffectSpecification:
    'For' '{' components+=ComponentSpecification ('and' components+=ComponentSpecification)* '}' 'Do' '{'
    transformations+=TransformationSpecification ('and' transformations+=TransformationSpecification)* '}';

ComponentSpecification:
    'Component' '(' properties+=ComponentProperty ('and' properties+=ComponentProperty)* ')';

ComponentProperty:
    Name | Identifier | Annotation | Type | Role | Assembly | Resource;

Name:
    'Name' '(' not?='not'? autonym=STRING ')';

Identifier:
    'Id' '(' not?='not'? id=STRING ')';

Annotation:
    'Annotation' '(' not?='not'? annotation=STRING ')';

Type:
    'Type' '(' not?='not'? type=ComponentType ')';

enum ComponentType:
    ANY='AnyComponentType' | BASIC='Basic' | COMPOSITE='Composite';

Role:
    'Role' '(' not?='not'? type=RoleType 'with' properties+=RoleProperty ('and' properties+=RoleProperty)* ')';

enum RoleType:
    ANY='AnyRoleType' | COMPONENT_REQUIRED_PROVIDED='ComponentRequiredProvided' |
    COMPONENT_REQUIRED='ComponentRequired' | COMPONENT_PROVIDED='ComponentProvided' |
    INFRASTRUCTURE_REQUIRED_PROVIDED='InfrastructureRequiredProvided' |
    INFRASTRUCTURE_REQUIRED='InfrastructureRequired' | INFRASTRUCTURE_PROVIDED='InfrastructureProvided';

RoleProperty:
    Name | Identifier | Annotation;

Assembly:
    'Assembly' '(' not?='not'? type=AssemblyType 'with' component=ComponentSpecification ')';

enum AssemblyType:
    ANY='AnyAssembly' | REQUIRED='Required' | PROVIDED='Provided';

Resource:
    'Resource' '(' properties+=ResourceProperty ('and' properties+=ResourceProperty)* ')';

ResourceProperty:
    Name | Identifier;

TransformationSpecification:
    NQA | Reasoning | NumericValue;

NQA:
    'NQA' '(' quality=STRING type=TransformationType element=STRING ')';

enum TransformationType:
    IS='=' | PLUS='+' | MINUS='-' | MULTIPLICATION='*' | DIVISION='/';

Reasoning:
    'Reasoning' '(' quality=STRING '=' rules+=Rule (',' rules+=Rule)* ')';

Rule:
    'Rule' '(' qualities+=STRING (',' qualities+=STRING)* '=' entries+=Entry (',' entries+=Entry)* ')';

Entry:
    'Entry' '(' key+=STRING (',' key+=STRING)* '=' value=STRING ')';

NumericValue:
    valueType=ID '(' transformationType=TransformationType transformationNumber=NUMBER ')';

terminal NUMBER:
    INT ('.' INT)?;

terminal NL:
    ('\r'? '\n');
