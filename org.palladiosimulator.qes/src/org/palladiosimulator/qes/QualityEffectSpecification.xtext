grammar org.palladiosimulator.qes.QualityEffectSpecification with org.eclipse.xtext.common.Terminals

generate qualityEffectSpecification "http://www.palladiosimulator.org/qes/QualityEffectSpecification"

Model:
    specifications+=QES+;

QES:
    'For{' components+=Component+ '}' 'Do{' transformations+=Transformation+ '}';

Component:
    'Component(' properties+=ComponentPropertie+ ')';

ComponentPropertie:
    Name | Identifier | Type | Role | Assembly | Resource;

Name:
    'Name(' not?='Not'? name=STRING ')';

Identifier:
    'Id(' not?='Not'? id=ID ')';

Type:
    'Type(' not?='Not'? type=ComponentType ')';

enum ComponentType:
    ANY='AnyComponent' | BASIC='Basic' | COMPOSITE='Composite';

Role:
    'Role(' not?='Not'? type=RoleType properties+=RolePropertie+ ')';

enum RoleType:
    ANY='AnyRole' | COMPONENT='Component' | COMPONENT_REQUIRED='ComponentRequired' | COMPONENT_PROVIDED='ComponentProvided' | INFRASTRUCTURE='Infrastructure' | INFRASTRUCTURE_REQUIRED='InfrastructureRequired' | INFRASTRUCTURE_PROVIDED='InfrastructureProvided';

RolePropertie:
    Name | Identifier ;

Assembly:
    'Assembly(' not?='Not'? type=AssemblyType components+=Component+ ')';

enum AssemblyType:
    ANY='AnyAssembly' | REQUIRED='Required' | PROVIDED='Provided';

Resource:
    'Resource(' properties+=ResourcePropertie+ ')';

ResourcePropertie:
    Name | Identifier ;

Transformation:
    NQA | Reasoning;

NQA:
    'NQA(' quality=STRING '=' element=STRING ')';

Reasoning:
    'Reasoning(' quality=STRING ':' rules+=Rule+ ')';

Rule:
    '(' qualities+=STRING+ ':' entries+=Entry+ ')';

Entry:
    '[' key+=STRING+ '=' value=STRING ']';
