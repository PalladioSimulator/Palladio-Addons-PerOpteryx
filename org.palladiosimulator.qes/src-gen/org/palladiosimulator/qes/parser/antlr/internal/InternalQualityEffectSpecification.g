/*
 * generated by Xtext 2.13.0
 */
grammar InternalQualityEffectSpecification;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.palladiosimulator.qes.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.palladiosimulator.qes.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.palladiosimulator.qes.services.QualityEffectSpecificationGrammarAccess;

}

@parser::members {

 	private QualityEffectSpecificationGrammarAccess grammarAccess;

    public InternalQualityEffectSpecificationParser(TokenStream input, QualityEffectSpecificationGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected QualityEffectSpecificationGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getSpecificationsQESParserRuleCall_0());
			}
			lv_specifications_0_0=ruleQES
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"specifications",
					lv_specifications_0_0,
					"org.palladiosimulator.qes.QualityEffectSpecification.QES");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleQES
entryRuleQES returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQESRule()); }
	iv_ruleQES=ruleQES
	{ $current=$iv_ruleQES.current; }
	EOF;

// Rule QES
ruleQES returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='For{'
		{
			newLeafNode(otherlv_0, grammarAccess.getQESAccess().getForKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getQESAccess().getComponentsComponentSpecificationParserRuleCall_1_0());
				}
				lv_components_1_0=ruleComponentSpecification
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQESRule());
					}
					add(
						$current,
						"components",
						lv_components_1_0,
						"org.palladiosimulator.qes.QualityEffectSpecification.ComponentSpecification");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_2='}'
		{
			newLeafNode(otherlv_2, grammarAccess.getQESAccess().getRightCurlyBracketKeyword_2());
		}
		otherlv_3='Do{'
		{
			newLeafNode(otherlv_3, grammarAccess.getQESAccess().getDoKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getQESAccess().getTransformationsTransformationSpecificationParserRuleCall_4_0());
				}
				lv_transformations_4_0=ruleTransformationSpecification
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQESRule());
					}
					add(
						$current,
						"transformations",
						lv_transformations_4_0,
						"org.palladiosimulator.qes.QualityEffectSpecification.TransformationSpecification");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getQESAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleComponentSpecification
entryRuleComponentSpecification returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComponentSpecificationRule()); }
	iv_ruleComponentSpecification=ruleComponentSpecification
	{ $current=$iv_ruleComponentSpecification.current; }
	EOF;

// Rule ComponentSpecification
ruleComponentSpecification returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Component('
		{
			newLeafNode(otherlv_0, grammarAccess.getComponentSpecificationAccess().getComponentKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getComponentSpecificationAccess().getPropertiesComponentPropertyParserRuleCall_1_0());
				}
				lv_properties_1_0=ruleComponentProperty
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComponentSpecificationRule());
					}
					add(
						$current,
						"properties",
						lv_properties_1_0,
						"org.palladiosimulator.qes.QualityEffectSpecification.ComponentProperty");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getComponentSpecificationAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleComponentProperty
entryRuleComponentProperty returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComponentPropertyRule()); }
	iv_ruleComponentProperty=ruleComponentProperty
	{ $current=$iv_ruleComponentProperty.current; }
	EOF;

// Rule ComponentProperty
ruleComponentProperty returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getComponentPropertyAccess().getNameParserRuleCall_0());
		}
		this_Name_0=ruleName
		{
			$current = $this_Name_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getComponentPropertyAccess().getIdentifierParserRuleCall_1());
		}
		this_Identifier_1=ruleIdentifier
		{
			$current = $this_Identifier_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getComponentPropertyAccess().getAnnotationParserRuleCall_2());
		}
		this_Annotation_2=ruleAnnotation
		{
			$current = $this_Annotation_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getComponentPropertyAccess().getTypeParserRuleCall_3());
		}
		this_Type_3=ruleType
		{
			$current = $this_Type_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getComponentPropertyAccess().getRoleParserRuleCall_4());
		}
		this_Role_4=ruleRole
		{
			$current = $this_Role_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getComponentPropertyAccess().getAssemblyParserRuleCall_5());
		}
		this_Assembly_5=ruleAssembly
		{
			$current = $this_Assembly_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getComponentPropertyAccess().getResourceParserRuleCall_6());
		}
		this_Resource_6=ruleResource
		{
			$current = $this_Resource_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleName
entryRuleName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNameRule()); }
	iv_ruleName=ruleName
	{ $current=$iv_ruleName.current; }
	EOF;

// Rule Name
ruleName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Name('
		{
			newLeafNode(otherlv_0, grammarAccess.getNameAccess().getNameKeyword_0());
		}
		(
			(
				lv_not_1_0='Not'
				{
					newLeafNode(lv_not_1_0, grammarAccess.getNameAccess().getNotNotKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNameRule());
					}
					setWithLastConsumed($current, "not", true, "Not");
				}
			)
		)?
		(
			(
				lv_name_2_0=RULE_STRING
				{
					newLeafNode(lv_name_2_0, grammarAccess.getNameAccess().getNameSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNameRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getNameAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleIdentifier
entryRuleIdentifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIdentifierRule()); }
	iv_ruleIdentifier=ruleIdentifier
	{ $current=$iv_ruleIdentifier.current; }
	EOF;

// Rule Identifier
ruleIdentifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Id('
		{
			newLeafNode(otherlv_0, grammarAccess.getIdentifierAccess().getIdKeyword_0());
		}
		(
			(
				lv_not_1_0='Not'
				{
					newLeafNode(lv_not_1_0, grammarAccess.getIdentifierAccess().getNotNotKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIdentifierRule());
					}
					setWithLastConsumed($current, "not", true, "Not");
				}
			)
		)?
		(
			(
				lv_id_2_0=RULE_ID
				{
					newLeafNode(lv_id_2_0, grammarAccess.getIdentifierAccess().getIdIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIdentifierRule());
					}
					setWithLastConsumed(
						$current,
						"id",
						lv_id_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getIdentifierAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleAnnotation
entryRuleAnnotation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnnotationRule()); }
	iv_ruleAnnotation=ruleAnnotation
	{ $current=$iv_ruleAnnotation.current; }
	EOF;

// Rule Annotation
ruleAnnotation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Annotation('
		{
			newLeafNode(otherlv_0, grammarAccess.getAnnotationAccess().getAnnotationKeyword_0());
		}
		(
			(
				lv_not_1_0='Not'
				{
					newLeafNode(lv_not_1_0, grammarAccess.getAnnotationAccess().getNotNotKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAnnotationRule());
					}
					setWithLastConsumed($current, "not", true, "Not");
				}
			)
		)?
		(
			(
				lv_annotation_2_0=RULE_STRING
				{
					newLeafNode(lv_annotation_2_0, grammarAccess.getAnnotationAccess().getAnnotationSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAnnotationRule());
					}
					setWithLastConsumed(
						$current,
						"annotation",
						lv_annotation_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getAnnotationAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Type('
		{
			newLeafNode(otherlv_0, grammarAccess.getTypeAccess().getTypeKeyword_0());
		}
		(
			(
				lv_not_1_0='Not'
				{
					newLeafNode(lv_not_1_0, grammarAccess.getTypeAccess().getNotNotKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeRule());
					}
					setWithLastConsumed($current, "not", true, "Not");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeAccess().getTypeComponentTypeEnumRuleCall_2_0());
				}
				lv_type_2_0=ruleComponentType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"org.palladiosimulator.qes.QualityEffectSpecification.ComponentType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getTypeAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleRole
entryRuleRole returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRoleRule()); }
	iv_ruleRole=ruleRole
	{ $current=$iv_ruleRole.current; }
	EOF;

// Rule Role
ruleRole returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Role('
		{
			newLeafNode(otherlv_0, grammarAccess.getRoleAccess().getRoleKeyword_0());
		}
		(
			(
				lv_not_1_0='Not'
				{
					newLeafNode(lv_not_1_0, grammarAccess.getRoleAccess().getNotNotKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRoleRule());
					}
					setWithLastConsumed($current, "not", true, "Not");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getRoleAccess().getTypeRoleTypeEnumRuleCall_2_0());
				}
				lv_type_2_0=ruleRoleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRoleRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"org.palladiosimulator.qes.QualityEffectSpecification.RoleType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRoleAccess().getPropertiesRolePropertyParserRuleCall_3_0());
				}
				lv_properties_3_0=ruleRoleProperty
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRoleRule());
					}
					add(
						$current,
						"properties",
						lv_properties_3_0,
						"org.palladiosimulator.qes.QualityEffectSpecification.RoleProperty");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getRoleAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleRoleProperty
entryRuleRoleProperty returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRolePropertyRule()); }
	iv_ruleRoleProperty=ruleRoleProperty
	{ $current=$iv_ruleRoleProperty.current; }
	EOF;

// Rule RoleProperty
ruleRoleProperty returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRolePropertyAccess().getNameParserRuleCall_0());
		}
		this_Name_0=ruleName
		{
			$current = $this_Name_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRolePropertyAccess().getIdentifierParserRuleCall_1());
		}
		this_Identifier_1=ruleIdentifier
		{
			$current = $this_Identifier_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRolePropertyAccess().getAnnotationParserRuleCall_2());
		}
		this_Annotation_2=ruleAnnotation
		{
			$current = $this_Annotation_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAssembly
entryRuleAssembly returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssemblyRule()); }
	iv_ruleAssembly=ruleAssembly
	{ $current=$iv_ruleAssembly.current; }
	EOF;

// Rule Assembly
ruleAssembly returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Assembly('
		{
			newLeafNode(otherlv_0, grammarAccess.getAssemblyAccess().getAssemblyKeyword_0());
		}
		(
			(
				lv_not_1_0='Not'
				{
					newLeafNode(lv_not_1_0, grammarAccess.getAssemblyAccess().getNotNotKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssemblyRule());
					}
					setWithLastConsumed($current, "not", true, "Not");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getAssemblyAccess().getTypeAssemblyTypeEnumRuleCall_2_0());
				}
				lv_type_2_0=ruleAssemblyType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssemblyRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"org.palladiosimulator.qes.QualityEffectSpecification.AssemblyType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAssemblyAccess().getComponentsComponentSpecificationParserRuleCall_3_0());
				}
				lv_components_3_0=ruleComponentSpecification
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssemblyRule());
					}
					add(
						$current,
						"components",
						lv_components_3_0,
						"org.palladiosimulator.qes.QualityEffectSpecification.ComponentSpecification");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getAssemblyAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleResource
entryRuleResource returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getResourceRule()); }
	iv_ruleResource=ruleResource
	{ $current=$iv_ruleResource.current; }
	EOF;

// Rule Resource
ruleResource returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Resource('
		{
			newLeafNode(otherlv_0, grammarAccess.getResourceAccess().getResourceKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getResourceAccess().getPropertiesResourcePropertyParserRuleCall_1_0());
				}
				lv_properties_1_0=ruleResourceProperty
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getResourceRule());
					}
					add(
						$current,
						"properties",
						lv_properties_1_0,
						"org.palladiosimulator.qes.QualityEffectSpecification.ResourceProperty");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getResourceAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleResourceProperty
entryRuleResourceProperty returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getResourcePropertyRule()); }
	iv_ruleResourceProperty=ruleResourceProperty
	{ $current=$iv_ruleResourceProperty.current; }
	EOF;

// Rule ResourceProperty
ruleResourceProperty returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getResourcePropertyAccess().getNameParserRuleCall_0());
		}
		this_Name_0=ruleName
		{
			$current = $this_Name_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getResourcePropertyAccess().getIdentifierParserRuleCall_1());
		}
		this_Identifier_1=ruleIdentifier
		{
			$current = $this_Identifier_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTransformationSpecification
entryRuleTransformationSpecification returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTransformationSpecificationRule()); }
	iv_ruleTransformationSpecification=ruleTransformationSpecification
	{ $current=$iv_ruleTransformationSpecification.current; }
	EOF;

// Rule TransformationSpecification
ruleTransformationSpecification returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTransformationSpecificationAccess().getNQAParserRuleCall_0());
		}
		this_NQA_0=ruleNQA
		{
			$current = $this_NQA_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTransformationSpecificationAccess().getReasoningParserRuleCall_1());
		}
		this_Reasoning_1=ruleReasoning
		{
			$current = $this_Reasoning_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTransformationSpecificationAccess().getCostParserRuleCall_2());
		}
		this_Cost_2=ruleCost
		{
			$current = $this_Cost_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNQA
entryRuleNQA returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNQARule()); }
	iv_ruleNQA=ruleNQA
	{ $current=$iv_ruleNQA.current; }
	EOF;

// Rule NQA
ruleNQA returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='NQA('
		{
			newLeafNode(otherlv_0, grammarAccess.getNQAAccess().getNQAKeyword_0());
		}
		(
			(
				lv_quality_1_0=RULE_STRING
				{
					newLeafNode(lv_quality_1_0, grammarAccess.getNQAAccess().getQualitySTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNQARule());
					}
					setWithLastConsumed(
						$current,
						"quality",
						lv_quality_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getNQAAccess().getTypeTransformationTypeEnumRuleCall_2_0());
				}
				lv_type_2_0=ruleTransformationType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNQARule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"org.palladiosimulator.qes.QualityEffectSpecification.TransformationType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_element_3_0=RULE_STRING
				{
					newLeafNode(lv_element_3_0, grammarAccess.getNQAAccess().getElementSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNQARule());
					}
					setWithLastConsumed(
						$current,
						"element",
						lv_element_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getNQAAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleReasoning
entryRuleReasoning returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReasoningRule()); }
	iv_ruleReasoning=ruleReasoning
	{ $current=$iv_ruleReasoning.current; }
	EOF;

// Rule Reasoning
ruleReasoning returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Reasoning('
		{
			newLeafNode(otherlv_0, grammarAccess.getReasoningAccess().getReasoningKeyword_0());
		}
		(
			(
				lv_quality_1_0=RULE_STRING
				{
					newLeafNode(lv_quality_1_0, grammarAccess.getReasoningAccess().getQualitySTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getReasoningRule());
					}
					setWithLastConsumed(
						$current,
						"quality",
						lv_quality_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getReasoningAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReasoningAccess().getRulesRuleParserRuleCall_3_0());
				}
				lv_rules_3_0=ruleRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReasoningRule());
					}
					add(
						$current,
						"rules",
						lv_rules_3_0,
						"org.palladiosimulator.qes.QualityEffectSpecification.Rule");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getReasoningAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current; }
	EOF;

// Rule Rule
ruleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getRuleAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				lv_qualities_1_0=RULE_STRING
				{
					newLeafNode(lv_qualities_1_0, grammarAccess.getRuleAccess().getQualitiesSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRuleRule());
					}
					addWithLastConsumed(
						$current,
						"qualities",
						lv_qualities_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)+
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getRuleAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getEntriesEntryParserRuleCall_3_0());
				}
				lv_entries_3_0=ruleEntry
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					add(
						$current,
						"entries",
						lv_entries_3_0,
						"org.palladiosimulator.qes.QualityEffectSpecification.Entry");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getRuleAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleEntry
entryRuleEntry returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntryRule()); }
	iv_ruleEntry=ruleEntry
	{ $current=$iv_ruleEntry.current; }
	EOF;

// Rule Entry
ruleEntry returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getEntryAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				lv_key_1_0=RULE_STRING
				{
					newLeafNode(lv_key_1_0, grammarAccess.getEntryAccess().getKeySTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEntryRule());
					}
					addWithLastConsumed(
						$current,
						"key",
						lv_key_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)+
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getEntryAccess().getColonKeyword_2());
		}
		(
			(
				lv_value_3_0=RULE_STRING
				{
					newLeafNode(lv_value_3_0, grammarAccess.getEntryAccess().getValueSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEntryRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getEntryAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleCost
entryRuleCost returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCostRule()); }
	iv_ruleCost=ruleCost
	{ $current=$iv_ruleCost.current; }
	EOF;

// Rule Cost
ruleCost returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Cost('
		{
			newLeafNode(otherlv_0, grammarAccess.getCostAccess().getCostKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCostAccess().getTypeTransformationTypeEnumRuleCall_1_0());
				}
				lv_type_1_0=ruleTransformationType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCostRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"org.palladiosimulator.qes.QualityEffectSpecification.TransformationType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_cost_2_0=RULE_INT
				{
					newLeafNode(lv_cost_2_0, grammarAccess.getCostAccess().getCostINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCostRule());
					}
					setWithLastConsumed(
						$current,
						"cost",
						lv_cost_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getCostAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Rule ComponentType
ruleComponentType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='AnyComponentType'
			{
				$current = grammarAccess.getComponentTypeAccess().getANYEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getComponentTypeAccess().getANYEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Basic'
			{
				$current = grammarAccess.getComponentTypeAccess().getBASICEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getComponentTypeAccess().getBASICEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Composite'
			{
				$current = grammarAccess.getComponentTypeAccess().getCOMPOSITEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getComponentTypeAccess().getCOMPOSITEEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule RoleType
ruleRoleType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='AnyRoleType'
			{
				$current = grammarAccess.getRoleTypeAccess().getANYEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getRoleTypeAccess().getANYEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='ComponentRequiredProvided'
			{
				$current = grammarAccess.getRoleTypeAccess().getCOMPONENT_REQUIRED_PROVIDEDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getRoleTypeAccess().getCOMPONENT_REQUIRED_PROVIDEDEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='ComponentRequired'
			{
				$current = grammarAccess.getRoleTypeAccess().getCOMPONENT_REQUIREDEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getRoleTypeAccess().getCOMPONENT_REQUIREDEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='ComponentProvided'
			{
				$current = grammarAccess.getRoleTypeAccess().getCOMPONENT_PROVIDEDEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getRoleTypeAccess().getCOMPONENT_PROVIDEDEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='InfrastructureRequiredProvided'
			{
				$current = grammarAccess.getRoleTypeAccess().getINFRASTRUCTURE_REQUIRED_PROVIDEDEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getRoleTypeAccess().getINFRASTRUCTURE_REQUIRED_PROVIDEDEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='InfrastructureRequired'
			{
				$current = grammarAccess.getRoleTypeAccess().getINFRASTRUCTURE_REQUIREDEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getRoleTypeAccess().getINFRASTRUCTURE_REQUIREDEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='InfrastructureProvided'
			{
				$current = grammarAccess.getRoleTypeAccess().getINFRASTRUCTURE_PROVIDEDEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getRoleTypeAccess().getINFRASTRUCTURE_PROVIDEDEnumLiteralDeclaration_6());
			}
		)
	)
;

// Rule AssemblyType
ruleAssemblyType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='AnyAssembly'
			{
				$current = grammarAccess.getAssemblyTypeAccess().getANYEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAssemblyTypeAccess().getANYEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Required'
			{
				$current = grammarAccess.getAssemblyTypeAccess().getREQUIREDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAssemblyTypeAccess().getREQUIREDEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Provided'
			{
				$current = grammarAccess.getAssemblyTypeAccess().getPROVIDEDEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getAssemblyTypeAccess().getPROVIDEDEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule TransformationType
ruleTransformationType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='='
			{
				$current = grammarAccess.getTransformationTypeAccess().getISEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTransformationTypeAccess().getISEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='+'
			{
				$current = grammarAccess.getTransformationTypeAccess().getPLUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTransformationTypeAccess().getPLUSEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='-'
			{
				$current = grammarAccess.getTransformationTypeAccess().getMINUSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getTransformationTypeAccess().getMINUSEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='*'
			{
				$current = grammarAccess.getTransformationTypeAccess().getMULTIPLICATIONEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getTransformationTypeAccess().getMULTIPLICATIONEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='/'
			{
				$current = grammarAccess.getTransformationTypeAccess().getDIVISIONEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getTransformationTypeAccess().getDIVISIONEnumLiteralDeclaration_4());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
