/**
 * generated by Xtext 2.14.0
 */
package org.palladiosimulator.qes.qualityEffectSpecification.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.palladiosimulator.qes.qualityEffectSpecification.NumericValue;
import org.palladiosimulator.qes.qualityEffectSpecification.QualityEffectSpecificationPackage;
import org.palladiosimulator.qes.qualityEffectSpecification.TransformationType;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Numeric Value</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.palladiosimulator.qes.qualityEffectSpecification.impl.NumericValueImpl#getValueType <em>Value Type</em>}</li>
 *   <li>{@link org.palladiosimulator.qes.qualityEffectSpecification.impl.NumericValueImpl#getTransformationType <em>Transformation Type</em>}</li>
 *   <li>{@link org.palladiosimulator.qes.qualityEffectSpecification.impl.NumericValueImpl#getTransformationNumber <em>Transformation Number</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NumericValueImpl extends TransformationSpecificationImpl implements NumericValue
{
  /**
   * The default value of the '{@link #getValueType() <em>Value Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValueType()
   * @generated
   * @ordered
   */
  protected static final String VALUE_TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getValueType() <em>Value Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValueType()
   * @generated
   * @ordered
   */
  protected String valueType = VALUE_TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getTransformationType() <em>Transformation Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransformationType()
   * @generated
   * @ordered
   */
  protected static final TransformationType TRANSFORMATION_TYPE_EDEFAULT = TransformationType.IS;

  /**
   * The cached value of the '{@link #getTransformationType() <em>Transformation Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransformationType()
   * @generated
   * @ordered
   */
  protected TransformationType transformationType = TRANSFORMATION_TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getTransformationNumber() <em>Transformation Number</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransformationNumber()
   * @generated
   * @ordered
   */
  protected static final String TRANSFORMATION_NUMBER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTransformationNumber() <em>Transformation Number</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransformationNumber()
   * @generated
   * @ordered
   */
  protected String transformationNumber = TRANSFORMATION_NUMBER_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NumericValueImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return QualityEffectSpecificationPackage.Literals.NUMERIC_VALUE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getValueType()
  {
    return valueType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setValueType(String newValueType)
  {
    String oldValueType = valueType;
    valueType = newValueType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QualityEffectSpecificationPackage.NUMERIC_VALUE__VALUE_TYPE, oldValueType, valueType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TransformationType getTransformationType()
  {
    return transformationType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTransformationType(TransformationType newTransformationType)
  {
    TransformationType oldTransformationType = transformationType;
    transformationType = newTransformationType == null ? TRANSFORMATION_TYPE_EDEFAULT : newTransformationType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QualityEffectSpecificationPackage.NUMERIC_VALUE__TRANSFORMATION_TYPE, oldTransformationType, transformationType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getTransformationNumber()
  {
    return transformationNumber;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTransformationNumber(String newTransformationNumber)
  {
    String oldTransformationNumber = transformationNumber;
    transformationNumber = newTransformationNumber;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QualityEffectSpecificationPackage.NUMERIC_VALUE__TRANSFORMATION_NUMBER, oldTransformationNumber, transformationNumber));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case QualityEffectSpecificationPackage.NUMERIC_VALUE__VALUE_TYPE:
        return getValueType();
      case QualityEffectSpecificationPackage.NUMERIC_VALUE__TRANSFORMATION_TYPE:
        return getTransformationType();
      case QualityEffectSpecificationPackage.NUMERIC_VALUE__TRANSFORMATION_NUMBER:
        return getTransformationNumber();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case QualityEffectSpecificationPackage.NUMERIC_VALUE__VALUE_TYPE:
        setValueType((String)newValue);
        return;
      case QualityEffectSpecificationPackage.NUMERIC_VALUE__TRANSFORMATION_TYPE:
        setTransformationType((TransformationType)newValue);
        return;
      case QualityEffectSpecificationPackage.NUMERIC_VALUE__TRANSFORMATION_NUMBER:
        setTransformationNumber((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case QualityEffectSpecificationPackage.NUMERIC_VALUE__VALUE_TYPE:
        setValueType(VALUE_TYPE_EDEFAULT);
        return;
      case QualityEffectSpecificationPackage.NUMERIC_VALUE__TRANSFORMATION_TYPE:
        setTransformationType(TRANSFORMATION_TYPE_EDEFAULT);
        return;
      case QualityEffectSpecificationPackage.NUMERIC_VALUE__TRANSFORMATION_NUMBER:
        setTransformationNumber(TRANSFORMATION_NUMBER_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case QualityEffectSpecificationPackage.NUMERIC_VALUE__VALUE_TYPE:
        return VALUE_TYPE_EDEFAULT == null ? valueType != null : !VALUE_TYPE_EDEFAULT.equals(valueType);
      case QualityEffectSpecificationPackage.NUMERIC_VALUE__TRANSFORMATION_TYPE:
        return transformationType != TRANSFORMATION_TYPE_EDEFAULT;
      case QualityEffectSpecificationPackage.NUMERIC_VALUE__TRANSFORMATION_NUMBER:
        return TRANSFORMATION_NUMBER_EDEFAULT == null ? transformationNumber != null : !TRANSFORMATION_NUMBER_EDEFAULT.equals(transformationNumber);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (valueType: ");
    result.append(valueType);
    result.append(", transformationType: ");
    result.append(transformationType);
    result.append(", transformationNumber: ");
    result.append(transformationNumber);
    result.append(')');
    return result.toString();
  }

} //NumericValueImpl
