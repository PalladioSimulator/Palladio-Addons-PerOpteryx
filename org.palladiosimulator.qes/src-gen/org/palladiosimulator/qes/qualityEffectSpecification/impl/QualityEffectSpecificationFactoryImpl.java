/**
 * generated by Xtext 2.13.0
 */
package org.palladiosimulator.qes.qualityEffectSpecification.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.palladiosimulator.qes.qualityEffectSpecification.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class QualityEffectSpecificationFactoryImpl extends EFactoryImpl implements QualityEffectSpecificationFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static QualityEffectSpecificationFactory init()
  {
    try
    {
      QualityEffectSpecificationFactory theQualityEffectSpecificationFactory = (QualityEffectSpecificationFactory)EPackage.Registry.INSTANCE.getEFactory(QualityEffectSpecificationPackage.eNS_URI);
      if (theQualityEffectSpecificationFactory != null)
      {
        return theQualityEffectSpecificationFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new QualityEffectSpecificationFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public QualityEffectSpecificationFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case QualityEffectSpecificationPackage.MODEL: return createModel();
      case QualityEffectSpecificationPackage.QES: return createQES();
      case QualityEffectSpecificationPackage.COMPONENT: return createComponent();
      case QualityEffectSpecificationPackage.COMPONENT_PROPERTIE: return createComponentPropertie();
      case QualityEffectSpecificationPackage.NAME: return createName();
      case QualityEffectSpecificationPackage.IDENTIFIER: return createIdentifier();
      case QualityEffectSpecificationPackage.TYPE: return createType();
      case QualityEffectSpecificationPackage.ROLE: return createRole();
      case QualityEffectSpecificationPackage.ROLE_PROPERTIE: return createRolePropertie();
      case QualityEffectSpecificationPackage.ASSEMBLY: return createAssembly();
      case QualityEffectSpecificationPackage.RESOURCE: return createResource();
      case QualityEffectSpecificationPackage.RESOURCE_PROPERTIE: return createResourcePropertie();
      case QualityEffectSpecificationPackage.TRANSFORMATION: return createTransformation();
      case QualityEffectSpecificationPackage.NQA: return createNQA();
      case QualityEffectSpecificationPackage.REASONING: return createReasoning();
      case QualityEffectSpecificationPackage.RULE: return createRule();
      case QualityEffectSpecificationPackage.ENTRY: return createEntry();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case QualityEffectSpecificationPackage.COMPONENT_TYPE:
        return createComponentTypeFromString(eDataType, initialValue);
      case QualityEffectSpecificationPackage.ROLE_TYPE:
        return createRoleTypeFromString(eDataType, initialValue);
      case QualityEffectSpecificationPackage.ASSEMBLY_TYPE:
        return createAssemblyTypeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case QualityEffectSpecificationPackage.COMPONENT_TYPE:
        return convertComponentTypeToString(eDataType, instanceValue);
      case QualityEffectSpecificationPackage.ROLE_TYPE:
        return convertRoleTypeToString(eDataType, instanceValue);
      case QualityEffectSpecificationPackage.ASSEMBLY_TYPE:
        return convertAssemblyTypeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public QES createQES()
  {
    QESImpl qes = new QESImpl();
    return qes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Component createComponent()
  {
    ComponentImpl component = new ComponentImpl();
    return component;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComponentPropertie createComponentPropertie()
  {
    ComponentPropertieImpl componentPropertie = new ComponentPropertieImpl();
    return componentPropertie;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Name createName()
  {
    NameImpl name = new NameImpl();
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Identifier createIdentifier()
  {
    IdentifierImpl identifier = new IdentifierImpl();
    return identifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Role createRole()
  {
    RoleImpl role = new RoleImpl();
    return role;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RolePropertie createRolePropertie()
  {
    RolePropertieImpl rolePropertie = new RolePropertieImpl();
    return rolePropertie;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Assembly createAssembly()
  {
    AssemblyImpl assembly = new AssemblyImpl();
    return assembly;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Resource createResource()
  {
    ResourceImpl resource = new ResourceImpl();
    return resource;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ResourcePropertie createResourcePropertie()
  {
    ResourcePropertieImpl resourcePropertie = new ResourcePropertieImpl();
    return resourcePropertie;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Transformation createTransformation()
  {
    TransformationImpl transformation = new TransformationImpl();
    return transformation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NQA createNQA()
  {
    NQAImpl nqa = new NQAImpl();
    return nqa;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Reasoning createReasoning()
  {
    ReasoningImpl reasoning = new ReasoningImpl();
    return reasoning;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Rule createRule()
  {
    RuleImpl rule = new RuleImpl();
    return rule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Entry createEntry()
  {
    EntryImpl entry = new EntryImpl();
    return entry;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComponentType createComponentTypeFromString(EDataType eDataType, String initialValue)
  {
    ComponentType result = ComponentType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertComponentTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RoleType createRoleTypeFromString(EDataType eDataType, String initialValue)
  {
    RoleType result = RoleType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertRoleTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AssemblyType createAssemblyTypeFromString(EDataType eDataType, String initialValue)
  {
    AssemblyType result = AssemblyType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertAssemblyTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public QualityEffectSpecificationPackage getQualityEffectSpecificationPackage()
  {
    return (QualityEffectSpecificationPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static QualityEffectSpecificationPackage getPackage()
  {
    return QualityEffectSpecificationPackage.eINSTANCE;
  }

} //QualityEffectSpecificationFactoryImpl
