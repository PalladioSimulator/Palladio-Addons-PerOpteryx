/*
 * generated by Xtext 2.13.0
 */
package org.palladiosimulator.qes.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class QualityEffectSpecificationGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.Model");
		private final Assignment cSpecificationsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSpecificationsQESParserRuleCall_0 = (RuleCall)cSpecificationsAssignment.eContents().get(0);
		
		//Model:
		//	specifications+=QES+;
		@Override public ParserRule getRule() { return rule; }
		
		//specifications+=QES+
		public Assignment getSpecificationsAssignment() { return cSpecificationsAssignment; }
		
		//QES
		public RuleCall getSpecificationsQESParserRuleCall_0() { return cSpecificationsQESParserRuleCall_0; }
	}
	public class QESElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.QES");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cComponentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cComponentsComponentSpecificationParserRuleCall_1_0 = (RuleCall)cComponentsAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDoKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTransformationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTransformationsTransformationSpecificationParserRuleCall_4_0 = (RuleCall)cTransformationsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//QES:
		//	'For{' components+=ComponentSpecification+ '}' 'Do{' transformations+=TransformationSpecification+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'For{' components+=ComponentSpecification+ '}' 'Do{' transformations+=TransformationSpecification+ '}'
		public Group getGroup() { return cGroup; }
		
		//'For{'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//components+=ComponentSpecification+
		public Assignment getComponentsAssignment_1() { return cComponentsAssignment_1; }
		
		//ComponentSpecification
		public RuleCall getComponentsComponentSpecificationParserRuleCall_1_0() { return cComponentsComponentSpecificationParserRuleCall_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
		
		//'Do{'
		public Keyword getDoKeyword_3() { return cDoKeyword_3; }
		
		//transformations+=TransformationSpecification+
		public Assignment getTransformationsAssignment_4() { return cTransformationsAssignment_4; }
		
		//TransformationSpecification
		public RuleCall getTransformationsTransformationSpecificationParserRuleCall_4_0() { return cTransformationsTransformationSpecificationParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ComponentSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.ComponentSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPropertiesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertiesComponentPropertyParserRuleCall_1_0 = (RuleCall)cPropertiesAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ComponentSpecification:
		//	'Component(' properties+=ComponentProperty+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Component(' properties+=ComponentProperty+ ')'
		public Group getGroup() { return cGroup; }
		
		//'Component('
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }
		
		//properties+=ComponentProperty+
		public Assignment getPropertiesAssignment_1() { return cPropertiesAssignment_1; }
		
		//ComponentProperty
		public RuleCall getPropertiesComponentPropertyParserRuleCall_1_0() { return cPropertiesComponentPropertyParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ComponentPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.ComponentProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRoleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAssemblyParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cResourceParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//ComponentProperty:
		//	Name | Identifier | Type | Role | Assembly | Resource;
		@Override public ParserRule getRule() { return rule; }
		
		//Name | Identifier | Type | Role | Assembly | Resource
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Name
		public RuleCall getNameParserRuleCall_0() { return cNameParserRuleCall_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_1() { return cIdentifierParserRuleCall_1; }
		
		//Type
		public RuleCall getTypeParserRuleCall_2() { return cTypeParserRuleCall_2; }
		
		//Role
		public RuleCall getRoleParserRuleCall_3() { return cRoleParserRuleCall_3; }
		
		//Assembly
		public RuleCall getAssemblyParserRuleCall_4() { return cAssemblyParserRuleCall_4; }
		
		//Resource
		public RuleCall getResourceParserRuleCall_5() { return cResourceParserRuleCall_5; }
	}
	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.Name");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNotAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNotNotKeyword_1_0 = (Keyword)cNotAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Name:
		//	'Name(' not?='Not'? name=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Name(' not?='Not'? name=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//'Name('
		public Keyword getNameKeyword_0() { return cNameKeyword_0; }
		
		//not?='Not'?
		public Assignment getNotAssignment_1() { return cNotAssignment_1; }
		
		//'Not'
		public Keyword getNotNotKeyword_1_0() { return cNotNotKeyword_1_0; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.Identifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIdKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNotAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNotNotKeyword_1_0 = (Keyword)cNotAssignment_1.eContents().get(0);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Identifier:
		//	'Id(' not?='Not'? id=ID ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Id(' not?='Not'? id=ID ')'
		public Group getGroup() { return cGroup; }
		
		//'Id('
		public Keyword getIdKeyword_0() { return cIdKeyword_0; }
		
		//not?='Not'?
		public Assignment getNotAssignment_1() { return cNotAssignment_1; }
		
		//'Not'
		public Keyword getNotNotKeyword_1_0() { return cNotNotKeyword_1_0; }
		
		//id=ID
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_2_0() { return cIdIDTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNotAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNotNotKeyword_1_0 = (Keyword)cNotAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeComponentTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Type:
		//	'Type(' not?='Not'? type=ComponentType ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Type(' not?='Not'? type=ComponentType ')'
		public Group getGroup() { return cGroup; }
		
		//'Type('
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//not?='Not'?
		public Assignment getNotAssignment_1() { return cNotAssignment_1; }
		
		//'Not'
		public Keyword getNotNotKeyword_1_0() { return cNotNotKeyword_1_0; }
		
		//type=ComponentType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//ComponentType
		public RuleCall getTypeComponentTypeEnumRuleCall_2_0() { return cTypeComponentTypeEnumRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class RoleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.Role");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRoleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNotAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNotNotKeyword_1_0 = (Keyword)cNotAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeRoleTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesRolePropertyParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Role:
		//	'Role(' not?='Not'? type=RoleType properties+=RoleProperty+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Role(' not?='Not'? type=RoleType properties+=RoleProperty+ ')'
		public Group getGroup() { return cGroup; }
		
		//'Role('
		public Keyword getRoleKeyword_0() { return cRoleKeyword_0; }
		
		//not?='Not'?
		public Assignment getNotAssignment_1() { return cNotAssignment_1; }
		
		//'Not'
		public Keyword getNotNotKeyword_1_0() { return cNotNotKeyword_1_0; }
		
		//type=RoleType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//RoleType
		public RuleCall getTypeRoleTypeEnumRuleCall_2_0() { return cTypeRoleTypeEnumRuleCall_2_0; }
		
		//properties+=RoleProperty+
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }
		
		//RoleProperty
		public RuleCall getPropertiesRolePropertyParserRuleCall_3_0() { return cPropertiesRolePropertyParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class RolePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.RoleProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInterfaceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//RoleProperty:
		//	Name | Identifier | Interface;
		@Override public ParserRule getRule() { return rule; }
		
		//Name | Identifier | Interface
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Name
		public RuleCall getNameParserRuleCall_0() { return cNameParserRuleCall_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_1() { return cIdentifierParserRuleCall_1; }
		
		//Interface
		public RuleCall getInterfaceParserRuleCall_2() { return cInterfaceParserRuleCall_2; }
	}
	public class InterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.Interface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPropertiesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertiesInterfacePropertyParserRuleCall_1_0 = (RuleCall)cPropertiesAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Interface:
		//	'Interface(' properties+=InterfaceProperty+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Interface(' properties+=InterfaceProperty+ ')'
		public Group getGroup() { return cGroup; }
		
		//'Interface('
		public Keyword getInterfaceKeyword_0() { return cInterfaceKeyword_0; }
		
		//properties+=InterfaceProperty+
		public Assignment getPropertiesAssignment_1() { return cPropertiesAssignment_1; }
		
		//InterfaceProperty
		public RuleCall getPropertiesInterfacePropertyParserRuleCall_1_0() { return cPropertiesInterfacePropertyParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class InterfacePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.InterfaceProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMethodSignatureParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//InterfaceProperty:
		//	Name | Identifier | MethodSignature;
		@Override public ParserRule getRule() { return rule; }
		
		//Name | Identifier | MethodSignature
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Name
		public RuleCall getNameParserRuleCall_0() { return cNameParserRuleCall_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_1() { return cIdentifierParserRuleCall_1; }
		
		//MethodSignature
		public RuleCall getMethodSignatureParserRuleCall_2() { return cMethodSignatureParserRuleCall_2; }
	}
	public class MethodSignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.MethodSignature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMethodKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParameterTypesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParameterTypesSTRINGTerminalRuleCall_3_0 = (RuleCall)cParameterTypesAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MethodSignature:
		//	'Method(' name=STRING ':' parameterTypes+=STRING* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Method(' name=STRING ':' parameterTypes+=STRING* ')'
		public Group getGroup() { return cGroup; }
		
		//'Method('
		public Keyword getMethodKeyword_0() { return cMethodKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//parameterTypes+=STRING*
		public Assignment getParameterTypesAssignment_3() { return cParameterTypesAssignment_3; }
		
		//STRING
		public RuleCall getParameterTypesSTRINGTerminalRuleCall_3_0() { return cParameterTypesSTRINGTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AssemblyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.Assembly");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssemblyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNotAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNotNotKeyword_1_0 = (Keyword)cNotAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeAssemblyTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cComponentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComponentsComponentSpecificationParserRuleCall_3_0 = (RuleCall)cComponentsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Assembly:
		//	'Assembly(' not?='Not'? type=AssemblyType components+=ComponentSpecification+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Assembly(' not?='Not'? type=AssemblyType components+=ComponentSpecification+ ')'
		public Group getGroup() { return cGroup; }
		
		//'Assembly('
		public Keyword getAssemblyKeyword_0() { return cAssemblyKeyword_0; }
		
		//not?='Not'?
		public Assignment getNotAssignment_1() { return cNotAssignment_1; }
		
		//'Not'
		public Keyword getNotNotKeyword_1_0() { return cNotNotKeyword_1_0; }
		
		//type=AssemblyType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//AssemblyType
		public RuleCall getTypeAssemblyTypeEnumRuleCall_2_0() { return cTypeAssemblyTypeEnumRuleCall_2_0; }
		
		//components+=ComponentSpecification+
		public Assignment getComponentsAssignment_3() { return cComponentsAssignment_3; }
		
		//ComponentSpecification
		public RuleCall getComponentsComponentSpecificationParserRuleCall_3_0() { return cComponentsComponentSpecificationParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.Resource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPropertiesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertiesResourcePropertyParserRuleCall_1_0 = (RuleCall)cPropertiesAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Resource:
		//	'Resource(' properties+=ResourceProperty+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Resource(' properties+=ResourceProperty+ ')'
		public Group getGroup() { return cGroup; }
		
		//'Resource('
		public Keyword getResourceKeyword_0() { return cResourceKeyword_0; }
		
		//properties+=ResourceProperty+
		public Assignment getPropertiesAssignment_1() { return cPropertiesAssignment_1; }
		
		//ResourceProperty
		public RuleCall getPropertiesResourcePropertyParserRuleCall_1_0() { return cPropertiesResourcePropertyParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ResourcePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.ResourceProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ResourceProperty:
		//	Name | Identifier;
		@Override public ParserRule getRule() { return rule; }
		
		//Name | Identifier
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Name
		public RuleCall getNameParserRuleCall_0() { return cNameParserRuleCall_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_1() { return cIdentifierParserRuleCall_1; }
	}
	public class TransformationSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.TransformationSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNQAParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReasoningParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCostParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TransformationSpecification:
		//	NQA | Reasoning | Cost;
		@Override public ParserRule getRule() { return rule; }
		
		//NQA | Reasoning | Cost
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NQA
		public RuleCall getNQAParserRuleCall_0() { return cNQAParserRuleCall_0; }
		
		//Reasoning
		public RuleCall getReasoningParserRuleCall_1() { return cReasoningParserRuleCall_1; }
		
		//Cost
		public RuleCall getCostParserRuleCall_2() { return cCostParserRuleCall_2; }
	}
	public class NQAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.NQA");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNQAKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQualityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQualitySTRINGTerminalRuleCall_1_0 = (RuleCall)cQualityAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTransformationTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cElementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementSTRINGTerminalRuleCall_3_0 = (RuleCall)cElementAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//NQA:
		//	'NQA(' quality=STRING type=TransformationType element=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'NQA(' quality=STRING type=TransformationType element=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//'NQA('
		public Keyword getNQAKeyword_0() { return cNQAKeyword_0; }
		
		//quality=STRING
		public Assignment getQualityAssignment_1() { return cQualityAssignment_1; }
		
		//STRING
		public RuleCall getQualitySTRINGTerminalRuleCall_1_0() { return cQualitySTRINGTerminalRuleCall_1_0; }
		
		//type=TransformationType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//TransformationType
		public RuleCall getTypeTransformationTypeEnumRuleCall_2_0() { return cTypeTransformationTypeEnumRuleCall_2_0; }
		
		//element=STRING
		public Assignment getElementAssignment_3() { return cElementAssignment_3; }
		
		//STRING
		public RuleCall getElementSTRINGTerminalRuleCall_3_0() { return cElementSTRINGTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ReasoningElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.Reasoning");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReasoningKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQualityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQualitySTRINGTerminalRuleCall_1_0 = (RuleCall)cQualityAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRulesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRulesRuleParserRuleCall_3_0 = (RuleCall)cRulesAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Reasoning:
		//	'Reasoning(' quality=STRING ':' rules+=Rule+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Reasoning(' quality=STRING ':' rules+=Rule+ ')'
		public Group getGroup() { return cGroup; }
		
		//'Reasoning('
		public Keyword getReasoningKeyword_0() { return cReasoningKeyword_0; }
		
		//quality=STRING
		public Assignment getQualityAssignment_1() { return cQualityAssignment_1; }
		
		//STRING
		public RuleCall getQualitySTRINGTerminalRuleCall_1_0() { return cQualitySTRINGTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//rules+=Rule+
		public Assignment getRulesAssignment_3() { return cRulesAssignment_3; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_3_0() { return cRulesRuleParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQualitiesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQualitiesSTRINGTerminalRuleCall_1_0 = (RuleCall)cQualitiesAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEntriesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEntriesEntryParserRuleCall_3_0 = (RuleCall)cEntriesAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Rule:
		//	'(' qualities+=STRING+ ':' entries+=Entry+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' qualities+=STRING+ ':' entries+=Entry+ ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//qualities+=STRING+
		public Assignment getQualitiesAssignment_1() { return cQualitiesAssignment_1; }
		
		//STRING
		public RuleCall getQualitiesSTRINGTerminalRuleCall_1_0() { return cQualitiesSTRINGTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//entries+=Entry+
		public Assignment getEntriesAssignment_3() { return cEntriesAssignment_3; }
		
		//Entry
		public RuleCall getEntriesEntryParserRuleCall_3_0() { return cEntriesEntryParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class EntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.Entry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeySTRINGTerminalRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Entry:
		//	'[' key+=STRING+ ':' value=STRING ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' key+=STRING+ ':' value=STRING ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//key+=STRING+
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }
		
		//STRING
		public RuleCall getKeySTRINGTerminalRuleCall_1_0() { return cKeySTRINGTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//value=STRING
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0() { return cValueSTRINGTerminalRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class CostElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.Cost");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCostKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTransformationTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cCostAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCostINTTerminalRuleCall_2_0 = (RuleCall)cCostAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Cost:
		//	'Cost(' type=TransformationType cost=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Cost(' type=TransformationType cost=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'Cost('
		public Keyword getCostKeyword_0() { return cCostKeyword_0; }
		
		//type=TransformationType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//TransformationType
		public RuleCall getTypeTransformationTypeEnumRuleCall_1_0() { return cTypeTransformationTypeEnumRuleCall_1_0; }
		
		//cost=INT
		public Assignment getCostAssignment_2() { return cCostAssignment_2; }
		
		//INT
		public RuleCall getCostINTTerminalRuleCall_2_0() { return cCostINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	
	public class ComponentTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.ComponentType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANYAnyComponentTypeKeyword_0_0 = (Keyword)cANYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBASICEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBASICBasicKeyword_1_0 = (Keyword)cBASICEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCOMPOSITEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCOMPOSITECompositeKeyword_2_0 = (Keyword)cCOMPOSITEEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ComponentType:
		//	ANY='AnyComponentType' | BASIC='Basic' | COMPOSITE='Composite';
		public EnumRule getRule() { return rule; }
		
		//ANY='AnyComponentType' | BASIC='Basic' | COMPOSITE='Composite'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ANY='AnyComponentType'
		public EnumLiteralDeclaration getANYEnumLiteralDeclaration_0() { return cANYEnumLiteralDeclaration_0; }
		
		//'AnyComponentType'
		public Keyword getANYAnyComponentTypeKeyword_0_0() { return cANYAnyComponentTypeKeyword_0_0; }
		
		//BASIC='Basic'
		public EnumLiteralDeclaration getBASICEnumLiteralDeclaration_1() { return cBASICEnumLiteralDeclaration_1; }
		
		//'Basic'
		public Keyword getBASICBasicKeyword_1_0() { return cBASICBasicKeyword_1_0; }
		
		//COMPOSITE='Composite'
		public EnumLiteralDeclaration getCOMPOSITEEnumLiteralDeclaration_2() { return cCOMPOSITEEnumLiteralDeclaration_2; }
		
		//'Composite'
		public Keyword getCOMPOSITECompositeKeyword_2_0() { return cCOMPOSITECompositeKeyword_2_0; }
	}
	public class RoleTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.RoleType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANYAnyRoleTypeKeyword_0_0 = (Keyword)cANYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCOMPONENT_REQUIRED_PROVIDEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCOMPONENT_REQUIRED_PROVIDEDComponentRequiredProvidedKeyword_1_0 = (Keyword)cCOMPONENT_REQUIRED_PROVIDEDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCOMPONENT_REQUIREDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCOMPONENT_REQUIREDComponentRequiredKeyword_2_0 = (Keyword)cCOMPONENT_REQUIREDEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCOMPONENT_PROVIDEDEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCOMPONENT_PROVIDEDComponentProvidedKeyword_3_0 = (Keyword)cCOMPONENT_PROVIDEDEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cINFRASTRUCTURE_REQUIRED_PROVIDEDEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cINFRASTRUCTURE_REQUIRED_PROVIDEDInfrastructureRequiredProvidedKeyword_4_0 = (Keyword)cINFRASTRUCTURE_REQUIRED_PROVIDEDEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cINFRASTRUCTURE_REQUIREDEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cINFRASTRUCTURE_REQUIREDInfrastructureRequiredKeyword_5_0 = (Keyword)cINFRASTRUCTURE_REQUIREDEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cINFRASTRUCTURE_PROVIDEDEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cINFRASTRUCTURE_PROVIDEDInfrastructureProvidedKeyword_6_0 = (Keyword)cINFRASTRUCTURE_PROVIDEDEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum RoleType:
		//	ANY='AnyRoleType' | COMPONENT_REQUIRED_PROVIDED='ComponentRequiredProvided' | COMPONENT_REQUIRED='ComponentRequired' |
		//	COMPONENT_PROVIDED='ComponentProvided' | INFRASTRUCTURE_REQUIRED_PROVIDED='InfrastructureRequiredProvided' |
		//	INFRASTRUCTURE_REQUIRED='InfrastructureRequired' | INFRASTRUCTURE_PROVIDED='InfrastructureProvided';
		public EnumRule getRule() { return rule; }
		
		//ANY='AnyRoleType' | COMPONENT_REQUIRED_PROVIDED='ComponentRequiredProvided' | COMPONENT_REQUIRED='ComponentRequired' |
		//COMPONENT_PROVIDED='ComponentProvided' | INFRASTRUCTURE_REQUIRED_PROVIDED='InfrastructureRequiredProvided' |
		//INFRASTRUCTURE_REQUIRED='InfrastructureRequired' | INFRASTRUCTURE_PROVIDED='InfrastructureProvided'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ANY='AnyRoleType'
		public EnumLiteralDeclaration getANYEnumLiteralDeclaration_0() { return cANYEnumLiteralDeclaration_0; }
		
		//'AnyRoleType'
		public Keyword getANYAnyRoleTypeKeyword_0_0() { return cANYAnyRoleTypeKeyword_0_0; }
		
		//COMPONENT_REQUIRED_PROVIDED='ComponentRequiredProvided'
		public EnumLiteralDeclaration getCOMPONENT_REQUIRED_PROVIDEDEnumLiteralDeclaration_1() { return cCOMPONENT_REQUIRED_PROVIDEDEnumLiteralDeclaration_1; }
		
		//'ComponentRequiredProvided'
		public Keyword getCOMPONENT_REQUIRED_PROVIDEDComponentRequiredProvidedKeyword_1_0() { return cCOMPONENT_REQUIRED_PROVIDEDComponentRequiredProvidedKeyword_1_0; }
		
		//COMPONENT_REQUIRED='ComponentRequired'
		public EnumLiteralDeclaration getCOMPONENT_REQUIREDEnumLiteralDeclaration_2() { return cCOMPONENT_REQUIREDEnumLiteralDeclaration_2; }
		
		//'ComponentRequired'
		public Keyword getCOMPONENT_REQUIREDComponentRequiredKeyword_2_0() { return cCOMPONENT_REQUIREDComponentRequiredKeyword_2_0; }
		
		//COMPONENT_PROVIDED='ComponentProvided'
		public EnumLiteralDeclaration getCOMPONENT_PROVIDEDEnumLiteralDeclaration_3() { return cCOMPONENT_PROVIDEDEnumLiteralDeclaration_3; }
		
		//'ComponentProvided'
		public Keyword getCOMPONENT_PROVIDEDComponentProvidedKeyword_3_0() { return cCOMPONENT_PROVIDEDComponentProvidedKeyword_3_0; }
		
		//INFRASTRUCTURE_REQUIRED_PROVIDED='InfrastructureRequiredProvided'
		public EnumLiteralDeclaration getINFRASTRUCTURE_REQUIRED_PROVIDEDEnumLiteralDeclaration_4() { return cINFRASTRUCTURE_REQUIRED_PROVIDEDEnumLiteralDeclaration_4; }
		
		//'InfrastructureRequiredProvided'
		public Keyword getINFRASTRUCTURE_REQUIRED_PROVIDEDInfrastructureRequiredProvidedKeyword_4_0() { return cINFRASTRUCTURE_REQUIRED_PROVIDEDInfrastructureRequiredProvidedKeyword_4_0; }
		
		//INFRASTRUCTURE_REQUIRED='InfrastructureRequired'
		public EnumLiteralDeclaration getINFRASTRUCTURE_REQUIREDEnumLiteralDeclaration_5() { return cINFRASTRUCTURE_REQUIREDEnumLiteralDeclaration_5; }
		
		//'InfrastructureRequired'
		public Keyword getINFRASTRUCTURE_REQUIREDInfrastructureRequiredKeyword_5_0() { return cINFRASTRUCTURE_REQUIREDInfrastructureRequiredKeyword_5_0; }
		
		//INFRASTRUCTURE_PROVIDED='InfrastructureProvided'
		public EnumLiteralDeclaration getINFRASTRUCTURE_PROVIDEDEnumLiteralDeclaration_6() { return cINFRASTRUCTURE_PROVIDEDEnumLiteralDeclaration_6; }
		
		//'InfrastructureProvided'
		public Keyword getINFRASTRUCTURE_PROVIDEDInfrastructureProvidedKeyword_6_0() { return cINFRASTRUCTURE_PROVIDEDInfrastructureProvidedKeyword_6_0; }
	}
	public class AssemblyTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.AssemblyType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANYAnyAssemblyKeyword_0_0 = (Keyword)cANYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cREQUIREDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cREQUIREDRequiredKeyword_1_0 = (Keyword)cREQUIREDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPROVIDEDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPROVIDEDProvidedKeyword_2_0 = (Keyword)cPROVIDEDEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum AssemblyType:
		//	ANY='AnyAssembly' | REQUIRED='Required' | PROVIDED='Provided';
		public EnumRule getRule() { return rule; }
		
		//ANY='AnyAssembly' | REQUIRED='Required' | PROVIDED='Provided'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ANY='AnyAssembly'
		public EnumLiteralDeclaration getANYEnumLiteralDeclaration_0() { return cANYEnumLiteralDeclaration_0; }
		
		//'AnyAssembly'
		public Keyword getANYAnyAssemblyKeyword_0_0() { return cANYAnyAssemblyKeyword_0_0; }
		
		//REQUIRED='Required'
		public EnumLiteralDeclaration getREQUIREDEnumLiteralDeclaration_1() { return cREQUIREDEnumLiteralDeclaration_1; }
		
		//'Required'
		public Keyword getREQUIREDRequiredKeyword_1_0() { return cREQUIREDRequiredKeyword_1_0; }
		
		//PROVIDED='Provided'
		public EnumLiteralDeclaration getPROVIDEDEnumLiteralDeclaration_2() { return cPROVIDEDEnumLiteralDeclaration_2; }
		
		//'Provided'
		public Keyword getPROVIDEDProvidedKeyword_2_0() { return cPROVIDEDProvidedKeyword_2_0; }
	}
	public class TransformationTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.TransformationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cISEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cISEqualsSignKeyword_0_0 = (Keyword)cISEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPLUSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPLUSPlusSignKeyword_1_0 = (Keyword)cPLUSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMINUSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMINUSHyphenMinusKeyword_2_0 = (Keyword)cMINUSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMULTIPLICATIONEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMULTIPLICATIONAsteriskKeyword_3_0 = (Keyword)cMULTIPLICATIONEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDIVISIONEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDIVISIONSolidusKeyword_4_0 = (Keyword)cDIVISIONEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum TransformationType:
		//	IS='=' | PLUS='+' | MINUS='-' | MULTIPLICATION='*' | DIVISION='/';
		public EnumRule getRule() { return rule; }
		
		//IS='=' | PLUS='+' | MINUS='-' | MULTIPLICATION='*' | DIVISION='/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IS='='
		public EnumLiteralDeclaration getISEnumLiteralDeclaration_0() { return cISEnumLiteralDeclaration_0; }
		
		//'='
		public Keyword getISEqualsSignKeyword_0_0() { return cISEqualsSignKeyword_0_0; }
		
		//PLUS='+'
		public EnumLiteralDeclaration getPLUSEnumLiteralDeclaration_1() { return cPLUSEnumLiteralDeclaration_1; }
		
		//'+'
		public Keyword getPLUSPlusSignKeyword_1_0() { return cPLUSPlusSignKeyword_1_0; }
		
		//MINUS='-'
		public EnumLiteralDeclaration getMINUSEnumLiteralDeclaration_2() { return cMINUSEnumLiteralDeclaration_2; }
		
		//'-'
		public Keyword getMINUSHyphenMinusKeyword_2_0() { return cMINUSHyphenMinusKeyword_2_0; }
		
		//MULTIPLICATION='*'
		public EnumLiteralDeclaration getMULTIPLICATIONEnumLiteralDeclaration_3() { return cMULTIPLICATIONEnumLiteralDeclaration_3; }
		
		//'*'
		public Keyword getMULTIPLICATIONAsteriskKeyword_3_0() { return cMULTIPLICATIONAsteriskKeyword_3_0; }
		
		//DIVISION='/'
		public EnumLiteralDeclaration getDIVISIONEnumLiteralDeclaration_4() { return cDIVISIONEnumLiteralDeclaration_4; }
		
		//'/'
		public Keyword getDIVISIONSolidusKeyword_4_0() { return cDIVISIONSolidusKeyword_4_0; }
	}
	
	private final ModelElements pModel;
	private final QESElements pQES;
	private final ComponentSpecificationElements pComponentSpecification;
	private final ComponentPropertyElements pComponentProperty;
	private final NameElements pName;
	private final IdentifierElements pIdentifier;
	private final TypeElements pType;
	private final ComponentTypeElements eComponentType;
	private final RoleElements pRole;
	private final RoleTypeElements eRoleType;
	private final RolePropertyElements pRoleProperty;
	private final InterfaceElements pInterface;
	private final InterfacePropertyElements pInterfaceProperty;
	private final MethodSignatureElements pMethodSignature;
	private final AssemblyElements pAssembly;
	private final AssemblyTypeElements eAssemblyType;
	private final ResourceElements pResource;
	private final ResourcePropertyElements pResourceProperty;
	private final TransformationSpecificationElements pTransformationSpecification;
	private final NQAElements pNQA;
	private final TransformationTypeElements eTransformationType;
	private final ReasoningElements pReasoning;
	private final RuleElements pRule;
	private final EntryElements pEntry;
	private final CostElements pCost;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public QualityEffectSpecificationGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pQES = new QESElements();
		this.pComponentSpecification = new ComponentSpecificationElements();
		this.pComponentProperty = new ComponentPropertyElements();
		this.pName = new NameElements();
		this.pIdentifier = new IdentifierElements();
		this.pType = new TypeElements();
		this.eComponentType = new ComponentTypeElements();
		this.pRole = new RoleElements();
		this.eRoleType = new RoleTypeElements();
		this.pRoleProperty = new RolePropertyElements();
		this.pInterface = new InterfaceElements();
		this.pInterfaceProperty = new InterfacePropertyElements();
		this.pMethodSignature = new MethodSignatureElements();
		this.pAssembly = new AssemblyElements();
		this.eAssemblyType = new AssemblyTypeElements();
		this.pResource = new ResourceElements();
		this.pResourceProperty = new ResourcePropertyElements();
		this.pTransformationSpecification = new TransformationSpecificationElements();
		this.pNQA = new NQAElements();
		this.eTransformationType = new TransformationTypeElements();
		this.pReasoning = new ReasoningElements();
		this.pRule = new RuleElements();
		this.pEntry = new EntryElements();
		this.pCost = new CostElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.palladiosimulator.qes.QualityEffectSpecification".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	specifications+=QES+;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//QES:
	//	'For{' components+=ComponentSpecification+ '}' 'Do{' transformations+=TransformationSpecification+ '}';
	public QESElements getQESAccess() {
		return pQES;
	}
	
	public ParserRule getQESRule() {
		return getQESAccess().getRule();
	}
	
	//ComponentSpecification:
	//	'Component(' properties+=ComponentProperty+ ')';
	public ComponentSpecificationElements getComponentSpecificationAccess() {
		return pComponentSpecification;
	}
	
	public ParserRule getComponentSpecificationRule() {
		return getComponentSpecificationAccess().getRule();
	}
	
	//ComponentProperty:
	//	Name | Identifier | Type | Role | Assembly | Resource;
	public ComponentPropertyElements getComponentPropertyAccess() {
		return pComponentProperty;
	}
	
	public ParserRule getComponentPropertyRule() {
		return getComponentPropertyAccess().getRule();
	}
	
	//Name:
	//	'Name(' not?='Not'? name=STRING ')';
	public NameElements getNameAccess() {
		return pName;
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}
	
	//Identifier:
	//	'Id(' not?='Not'? id=ID ')';
	public IdentifierElements getIdentifierAccess() {
		return pIdentifier;
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}
	
	//Type:
	//	'Type(' not?='Not'? type=ComponentType ')';
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//enum ComponentType:
	//	ANY='AnyComponentType' | BASIC='Basic' | COMPOSITE='Composite';
	public ComponentTypeElements getComponentTypeAccess() {
		return eComponentType;
	}
	
	public EnumRule getComponentTypeRule() {
		return getComponentTypeAccess().getRule();
	}
	
	//Role:
	//	'Role(' not?='Not'? type=RoleType properties+=RoleProperty+ ')';
	public RoleElements getRoleAccess() {
		return pRole;
	}
	
	public ParserRule getRoleRule() {
		return getRoleAccess().getRule();
	}
	
	//enum RoleType:
	//	ANY='AnyRoleType' | COMPONENT_REQUIRED_PROVIDED='ComponentRequiredProvided' | COMPONENT_REQUIRED='ComponentRequired' |
	//	COMPONENT_PROVIDED='ComponentProvided' | INFRASTRUCTURE_REQUIRED_PROVIDED='InfrastructureRequiredProvided' |
	//	INFRASTRUCTURE_REQUIRED='InfrastructureRequired' | INFRASTRUCTURE_PROVIDED='InfrastructureProvided';
	public RoleTypeElements getRoleTypeAccess() {
		return eRoleType;
	}
	
	public EnumRule getRoleTypeRule() {
		return getRoleTypeAccess().getRule();
	}
	
	//RoleProperty:
	//	Name | Identifier | Interface;
	public RolePropertyElements getRolePropertyAccess() {
		return pRoleProperty;
	}
	
	public ParserRule getRolePropertyRule() {
		return getRolePropertyAccess().getRule();
	}
	
	//Interface:
	//	'Interface(' properties+=InterfaceProperty+ ')';
	public InterfaceElements getInterfaceAccess() {
		return pInterface;
	}
	
	public ParserRule getInterfaceRule() {
		return getInterfaceAccess().getRule();
	}
	
	//InterfaceProperty:
	//	Name | Identifier | MethodSignature;
	public InterfacePropertyElements getInterfacePropertyAccess() {
		return pInterfaceProperty;
	}
	
	public ParserRule getInterfacePropertyRule() {
		return getInterfacePropertyAccess().getRule();
	}
	
	//MethodSignature:
	//	'Method(' name=STRING ':' parameterTypes+=STRING* ')';
	public MethodSignatureElements getMethodSignatureAccess() {
		return pMethodSignature;
	}
	
	public ParserRule getMethodSignatureRule() {
		return getMethodSignatureAccess().getRule();
	}
	
	//Assembly:
	//	'Assembly(' not?='Not'? type=AssemblyType components+=ComponentSpecification+ ')';
	public AssemblyElements getAssemblyAccess() {
		return pAssembly;
	}
	
	public ParserRule getAssemblyRule() {
		return getAssemblyAccess().getRule();
	}
	
	//enum AssemblyType:
	//	ANY='AnyAssembly' | REQUIRED='Required' | PROVIDED='Provided';
	public AssemblyTypeElements getAssemblyTypeAccess() {
		return eAssemblyType;
	}
	
	public EnumRule getAssemblyTypeRule() {
		return getAssemblyTypeAccess().getRule();
	}
	
	//Resource:
	//	'Resource(' properties+=ResourceProperty+ ')';
	public ResourceElements getResourceAccess() {
		return pResource;
	}
	
	public ParserRule getResourceRule() {
		return getResourceAccess().getRule();
	}
	
	//ResourceProperty:
	//	Name | Identifier;
	public ResourcePropertyElements getResourcePropertyAccess() {
		return pResourceProperty;
	}
	
	public ParserRule getResourcePropertyRule() {
		return getResourcePropertyAccess().getRule();
	}
	
	//TransformationSpecification:
	//	NQA | Reasoning | Cost;
	public TransformationSpecificationElements getTransformationSpecificationAccess() {
		return pTransformationSpecification;
	}
	
	public ParserRule getTransformationSpecificationRule() {
		return getTransformationSpecificationAccess().getRule();
	}
	
	//NQA:
	//	'NQA(' quality=STRING type=TransformationType element=STRING ')';
	public NQAElements getNQAAccess() {
		return pNQA;
	}
	
	public ParserRule getNQARule() {
		return getNQAAccess().getRule();
	}
	
	//enum TransformationType:
	//	IS='=' | PLUS='+' | MINUS='-' | MULTIPLICATION='*' | DIVISION='/';
	public TransformationTypeElements getTransformationTypeAccess() {
		return eTransformationType;
	}
	
	public EnumRule getTransformationTypeRule() {
		return getTransformationTypeAccess().getRule();
	}
	
	//Reasoning:
	//	'Reasoning(' quality=STRING ':' rules+=Rule+ ')';
	public ReasoningElements getReasoningAccess() {
		return pReasoning;
	}
	
	public ParserRule getReasoningRule() {
		return getReasoningAccess().getRule();
	}
	
	//Rule:
	//	'(' qualities+=STRING+ ':' entries+=Entry+ ')';
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//Entry:
	//	'[' key+=STRING+ ':' value=STRING ']';
	public EntryElements getEntryAccess() {
		return pEntry;
	}
	
	public ParserRule getEntryRule() {
		return getEntryAccess().getRule();
	}
	
	//Cost:
	//	'Cost(' type=TransformationType cost=INT ')';
	public CostElements getCostAccess() {
		return pCost;
	}
	
	public ParserRule getCostRule() {
		return getCostAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
