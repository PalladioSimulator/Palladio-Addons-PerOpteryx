/*
 * generated by Xtext 2.14.0
 */
package org.palladiosimulator.qes.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class QualityEffectSpecificationGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSpecificationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSpecificationsQualityEffectSpecificationParserRuleCall_0_0 = (RuleCall)cSpecificationsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cNLTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cSpecificationsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSpecificationsQualityEffectSpecificationParserRuleCall_1_1_0 = (RuleCall)cSpecificationsAssignment_1_1.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Model:
		//	specifications+=QualityEffectSpecification (NL+ specifications+=QualityEffectSpecification)* NL+;
		@Override public ParserRule getRule() { return rule; }
		
		//specifications+=QualityEffectSpecification (NL+ specifications+=QualityEffectSpecification)* NL+
		public Group getGroup() { return cGroup; }
		
		//specifications+=QualityEffectSpecification
		public Assignment getSpecificationsAssignment_0() { return cSpecificationsAssignment_0; }
		
		//QualityEffectSpecification
		public RuleCall getSpecificationsQualityEffectSpecificationParserRuleCall_0_0() { return cSpecificationsQualityEffectSpecificationParserRuleCall_0_0; }
		
		//(NL+ specifications+=QualityEffectSpecification)*
		public Group getGroup_1() { return cGroup_1; }
		
		//NL+
		public RuleCall getNLTerminalRuleCall_1_0() { return cNLTerminalRuleCall_1_0; }
		
		//specifications+=QualityEffectSpecification
		public Assignment getSpecificationsAssignment_1_1() { return cSpecificationsAssignment_1_1; }
		
		//QualityEffectSpecification
		public RuleCall getSpecificationsQualityEffectSpecificationParserRuleCall_1_1_0() { return cSpecificationsQualityEffectSpecificationParserRuleCall_1_1_0; }
		
		//NL+
		public RuleCall getNLTerminalRuleCall_2() { return cNLTerminalRuleCall_2; }
	}
	public class QualityEffectSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.QualityEffectSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cComponentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cComponentsComponentSpecificationParserRuleCall_2_0 = (RuleCall)cComponentsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAndKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cComponentsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cComponentsComponentSpecificationParserRuleCall_3_1_0 = (RuleCall)cComponentsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cDoKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTransformationsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTransformationsTransformationSpecificationParserRuleCall_7_0 = (RuleCall)cTransformationsAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cAndKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cTransformationsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cTransformationsTransformationSpecificationParserRuleCall_8_1_0 = (RuleCall)cTransformationsAssignment_8_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//QualityEffectSpecification:
		//	'For' '{' components+=ComponentSpecification ('and' components+=ComponentSpecification)* '}' 'Do' '{'
		//	transformations+=TransformationSpecification ('and' transformations+=TransformationSpecification)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'For' '{' components+=ComponentSpecification ('and' components+=ComponentSpecification)* '}' 'Do' '{'
		//transformations+=TransformationSpecification ('and' transformations+=TransformationSpecification)* '}'
		public Group getGroup() { return cGroup; }
		
		//'For'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//components+=ComponentSpecification
		public Assignment getComponentsAssignment_2() { return cComponentsAssignment_2; }
		
		//ComponentSpecification
		public RuleCall getComponentsComponentSpecificationParserRuleCall_2_0() { return cComponentsComponentSpecificationParserRuleCall_2_0; }
		
		//('and' components+=ComponentSpecification)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'and'
		public Keyword getAndKeyword_3_0() { return cAndKeyword_3_0; }
		
		//components+=ComponentSpecification
		public Assignment getComponentsAssignment_3_1() { return cComponentsAssignment_3_1; }
		
		//ComponentSpecification
		public RuleCall getComponentsComponentSpecificationParserRuleCall_3_1_0() { return cComponentsComponentSpecificationParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
		
		//'Do'
		public Keyword getDoKeyword_5() { return cDoKeyword_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//transformations+=TransformationSpecification
		public Assignment getTransformationsAssignment_7() { return cTransformationsAssignment_7; }
		
		//TransformationSpecification
		public RuleCall getTransformationsTransformationSpecificationParserRuleCall_7_0() { return cTransformationsTransformationSpecificationParserRuleCall_7_0; }
		
		//('and' transformations+=TransformationSpecification)*
		public Group getGroup_8() { return cGroup_8; }
		
		//'and'
		public Keyword getAndKeyword_8_0() { return cAndKeyword_8_0; }
		
		//transformations+=TransformationSpecification
		public Assignment getTransformationsAssignment_8_1() { return cTransformationsAssignment_8_1; }
		
		//TransformationSpecification
		public RuleCall getTransformationsTransformationSpecificationParserRuleCall_8_1_0() { return cTransformationsTransformationSpecificationParserRuleCall_8_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class ComponentSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.ComponentSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertiesComponentPropertyParserRuleCall_2_0 = (RuleCall)cPropertiesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAndKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPropertiesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPropertiesComponentPropertyParserRuleCall_3_1_0 = (RuleCall)cPropertiesAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ComponentSpecification:
		//	'Component' '(' properties+=ComponentProperty ('and' properties+=ComponentProperty)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Component' '(' properties+=ComponentProperty ('and' properties+=ComponentProperty)* ')'
		public Group getGroup() { return cGroup; }
		
		//'Component'
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//properties+=ComponentProperty
		public Assignment getPropertiesAssignment_2() { return cPropertiesAssignment_2; }
		
		//ComponentProperty
		public RuleCall getPropertiesComponentPropertyParserRuleCall_2_0() { return cPropertiesComponentPropertyParserRuleCall_2_0; }
		
		//('and' properties+=ComponentProperty)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'and'
		public Keyword getAndKeyword_3_0() { return cAndKeyword_3_0; }
		
		//properties+=ComponentProperty
		public Assignment getPropertiesAssignment_3_1() { return cPropertiesAssignment_3_1; }
		
		//ComponentProperty
		public RuleCall getPropertiesComponentPropertyParserRuleCall_3_1_0() { return cPropertiesComponentPropertyParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ComponentPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.ComponentProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAnnotationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRoleParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAssemblyParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cResourceParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//ComponentProperty:
		//	Name | Identifier | Annotation | Type | Role | Assembly | Resource;
		@Override public ParserRule getRule() { return rule; }
		
		//Name | Identifier | Annotation | Type | Role | Assembly | Resource
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Name
		public RuleCall getNameParserRuleCall_0() { return cNameParserRuleCall_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_1() { return cIdentifierParserRuleCall_1; }
		
		//Annotation
		public RuleCall getAnnotationParserRuleCall_2() { return cAnnotationParserRuleCall_2; }
		
		//Type
		public RuleCall getTypeParserRuleCall_3() { return cTypeParserRuleCall_3; }
		
		//Role
		public RuleCall getRoleParserRuleCall_4() { return cRoleParserRuleCall_4; }
		
		//Assembly
		public RuleCall getAssemblyParserRuleCall_5() { return cAssemblyParserRuleCall_5; }
		
		//Resource
		public RuleCall getResourceParserRuleCall_6() { return cResourceParserRuleCall_6; }
	}
	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.Name");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNotAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNotNotKeyword_2_0 = (Keyword)cNotAssignment_2.eContents().get(0);
		private final Assignment cAutonymAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAutonymSTRINGTerminalRuleCall_3_0 = (RuleCall)cAutonymAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Name:
		//	'Name' '(' not?='not'? autonym=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Name' '(' not?='not'? autonym=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//'Name'
		public Keyword getNameKeyword_0() { return cNameKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//not?='not'?
		public Assignment getNotAssignment_2() { return cNotAssignment_2; }
		
		//'not'
		public Keyword getNotNotKeyword_2_0() { return cNotNotKeyword_2_0; }
		
		//autonym=STRING
		public Assignment getAutonymAssignment_3() { return cAutonymAssignment_3; }
		
		//STRING
		public RuleCall getAutonymSTRINGTerminalRuleCall_3_0() { return cAutonymSTRINGTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.Identifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIdKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNotAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNotNotKeyword_2_0 = (Keyword)cNotAssignment_2.eContents().get(0);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdSTRINGTerminalRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Identifier:
		//	'Id' '(' not?='not'? id=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Id' '(' not?='not'? id=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//'Id'
		public Keyword getIdKeyword_0() { return cIdKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//not?='not'?
		public Assignment getNotAssignment_2() { return cNotAssignment_2; }
		
		//'not'
		public Keyword getNotNotKeyword_2_0() { return cNotNotKeyword_2_0; }
		
		//id=STRING
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }
		
		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_3_0() { return cIdSTRINGTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnnotationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNotAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNotNotKeyword_2_0 = (Keyword)cNotAssignment_2.eContents().get(0);
		private final Assignment cAnnotationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAnnotationSTRINGTerminalRuleCall_3_0 = (RuleCall)cAnnotationAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Annotation:
		//	'Annotation' '(' not?='not'? annotation=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Annotation' '(' not?='not'? annotation=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//'Annotation'
		public Keyword getAnnotationKeyword_0() { return cAnnotationKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//not?='not'?
		public Assignment getNotAssignment_2() { return cNotAssignment_2; }
		
		//'not'
		public Keyword getNotNotKeyword_2_0() { return cNotNotKeyword_2_0; }
		
		//annotation=STRING
		public Assignment getAnnotationAssignment_3() { return cAnnotationAssignment_3; }
		
		//STRING
		public RuleCall getAnnotationSTRINGTerminalRuleCall_3_0() { return cAnnotationSTRINGTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNotAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNotNotKeyword_2_0 = (Keyword)cNotAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeComponentTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Type:
		//	'Type' '(' not?='not'? type=ComponentType ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Type' '(' not?='not'? type=ComponentType ')'
		public Group getGroup() { return cGroup; }
		
		//'Type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//not?='not'?
		public Assignment getNotAssignment_2() { return cNotAssignment_2; }
		
		//'not'
		public Keyword getNotNotKeyword_2_0() { return cNotNotKeyword_2_0; }
		
		//type=ComponentType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//ComponentType
		public RuleCall getTypeComponentTypeEnumRuleCall_3_0() { return cTypeComponentTypeEnumRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class RoleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.Role");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRoleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNotAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNotNotKeyword_2_0 = (Keyword)cNotAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeRoleTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cWithKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPropertiesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPropertiesRolePropertyParserRuleCall_5_0 = (RuleCall)cPropertiesAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cAndKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cPropertiesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cPropertiesRolePropertyParserRuleCall_6_1_0 = (RuleCall)cPropertiesAssignment_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Role:
		//	'Role' '(' not?='not'? type=RoleType 'with' properties+=RoleProperty ('and' properties+=RoleProperty)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Role' '(' not?='not'? type=RoleType 'with' properties+=RoleProperty ('and' properties+=RoleProperty)* ')'
		public Group getGroup() { return cGroup; }
		
		//'Role'
		public Keyword getRoleKeyword_0() { return cRoleKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//not?='not'?
		public Assignment getNotAssignment_2() { return cNotAssignment_2; }
		
		//'not'
		public Keyword getNotNotKeyword_2_0() { return cNotNotKeyword_2_0; }
		
		//type=RoleType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//RoleType
		public RuleCall getTypeRoleTypeEnumRuleCall_3_0() { return cTypeRoleTypeEnumRuleCall_3_0; }
		
		//'with'
		public Keyword getWithKeyword_4() { return cWithKeyword_4; }
		
		//properties+=RoleProperty
		public Assignment getPropertiesAssignment_5() { return cPropertiesAssignment_5; }
		
		//RoleProperty
		public RuleCall getPropertiesRolePropertyParserRuleCall_5_0() { return cPropertiesRolePropertyParserRuleCall_5_0; }
		
		//('and' properties+=RoleProperty)*
		public Group getGroup_6() { return cGroup_6; }
		
		//'and'
		public Keyword getAndKeyword_6_0() { return cAndKeyword_6_0; }
		
		//properties+=RoleProperty
		public Assignment getPropertiesAssignment_6_1() { return cPropertiesAssignment_6_1; }
		
		//RoleProperty
		public RuleCall getPropertiesRolePropertyParserRuleCall_6_1_0() { return cPropertiesRolePropertyParserRuleCall_6_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class RolePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.RoleProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAnnotationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//RoleProperty:
		//	Name | Identifier | Annotation;
		@Override public ParserRule getRule() { return rule; }
		
		//Name | Identifier | Annotation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Name
		public RuleCall getNameParserRuleCall_0() { return cNameParserRuleCall_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_1() { return cIdentifierParserRuleCall_1; }
		
		//Annotation
		public RuleCall getAnnotationParserRuleCall_2() { return cAnnotationParserRuleCall_2; }
	}
	public class AssemblyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.Assembly");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssemblyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNotAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNotNotKeyword_2_0 = (Keyword)cNotAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeAssemblyTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cWithKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cComponentAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cComponentComponentSpecificationParserRuleCall_5_0 = (RuleCall)cComponentAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Assembly:
		//	'Assembly' '(' not?='not'? type=AssemblyType 'with' component=ComponentSpecification ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Assembly' '(' not?='not'? type=AssemblyType 'with' component=ComponentSpecification ')'
		public Group getGroup() { return cGroup; }
		
		//'Assembly'
		public Keyword getAssemblyKeyword_0() { return cAssemblyKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//not?='not'?
		public Assignment getNotAssignment_2() { return cNotAssignment_2; }
		
		//'not'
		public Keyword getNotNotKeyword_2_0() { return cNotNotKeyword_2_0; }
		
		//type=AssemblyType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//AssemblyType
		public RuleCall getTypeAssemblyTypeEnumRuleCall_3_0() { return cTypeAssemblyTypeEnumRuleCall_3_0; }
		
		//'with'
		public Keyword getWithKeyword_4() { return cWithKeyword_4; }
		
		//component=ComponentSpecification
		public Assignment getComponentAssignment_5() { return cComponentAssignment_5; }
		
		//ComponentSpecification
		public RuleCall getComponentComponentSpecificationParserRuleCall_5_0() { return cComponentComponentSpecificationParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class ResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.Resource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertiesResourcePropertyParserRuleCall_2_0 = (RuleCall)cPropertiesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAndKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPropertiesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPropertiesResourcePropertyParserRuleCall_3_1_0 = (RuleCall)cPropertiesAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Resource:
		//	'Resource' '(' properties+=ResourceProperty ('and' properties+=ResourceProperty)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Resource' '(' properties+=ResourceProperty ('and' properties+=ResourceProperty)* ')'
		public Group getGroup() { return cGroup; }
		
		//'Resource'
		public Keyword getResourceKeyword_0() { return cResourceKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//properties+=ResourceProperty
		public Assignment getPropertiesAssignment_2() { return cPropertiesAssignment_2; }
		
		//ResourceProperty
		public RuleCall getPropertiesResourcePropertyParserRuleCall_2_0() { return cPropertiesResourcePropertyParserRuleCall_2_0; }
		
		//('and' properties+=ResourceProperty)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'and'
		public Keyword getAndKeyword_3_0() { return cAndKeyword_3_0; }
		
		//properties+=ResourceProperty
		public Assignment getPropertiesAssignment_3_1() { return cPropertiesAssignment_3_1; }
		
		//ResourceProperty
		public RuleCall getPropertiesResourcePropertyParserRuleCall_3_1_0() { return cPropertiesResourcePropertyParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ResourcePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.ResourceProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ResourceProperty:
		//	Name | Identifier;
		@Override public ParserRule getRule() { return rule; }
		
		//Name | Identifier
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Name
		public RuleCall getNameParserRuleCall_0() { return cNameParserRuleCall_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_1() { return cIdentifierParserRuleCall_1; }
	}
	public class TransformationSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.TransformationSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNQAParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReasoningParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNumericValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TransformationSpecification:
		//	NQA | Reasoning | NumericValue;
		@Override public ParserRule getRule() { return rule; }
		
		//NQA | Reasoning | NumericValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NQA
		public RuleCall getNQAParserRuleCall_0() { return cNQAParserRuleCall_0; }
		
		//Reasoning
		public RuleCall getReasoningParserRuleCall_1() { return cReasoningParserRuleCall_1; }
		
		//NumericValue
		public RuleCall getNumericValueParserRuleCall_2() { return cNumericValueParserRuleCall_2; }
	}
	public class NQAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.NQA");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNQAKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cQualityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQualitySTRINGTerminalRuleCall_2_0 = (RuleCall)cQualityAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTransformationTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cElementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementSTRINGTerminalRuleCall_4_0 = (RuleCall)cElementAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//NQA:
		//	'NQA' '(' quality=STRING type=TransformationType element=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'NQA' '(' quality=STRING type=TransformationType element=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//'NQA'
		public Keyword getNQAKeyword_0() { return cNQAKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//quality=STRING
		public Assignment getQualityAssignment_2() { return cQualityAssignment_2; }
		
		//STRING
		public RuleCall getQualitySTRINGTerminalRuleCall_2_0() { return cQualitySTRINGTerminalRuleCall_2_0; }
		
		//type=TransformationType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//TransformationType
		public RuleCall getTypeTransformationTypeEnumRuleCall_3_0() { return cTypeTransformationTypeEnumRuleCall_3_0; }
		
		//element=STRING
		public Assignment getElementAssignment_4() { return cElementAssignment_4; }
		
		//STRING
		public RuleCall getElementSTRINGTerminalRuleCall_4_0() { return cElementSTRINGTerminalRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ReasoningElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.Reasoning");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReasoningKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cQualityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQualitySTRINGTerminalRuleCall_2_0 = (RuleCall)cQualityAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRulesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRulesRuleParserRuleCall_4_0 = (RuleCall)cRulesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRulesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRulesRuleParserRuleCall_5_1_0 = (RuleCall)cRulesAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Reasoning:
		//	'Reasoning' '(' quality=STRING '=' rules+=Rule (',' rules+=Rule)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Reasoning' '(' quality=STRING '=' rules+=Rule (',' rules+=Rule)* ')'
		public Group getGroup() { return cGroup; }
		
		//'Reasoning'
		public Keyword getReasoningKeyword_0() { return cReasoningKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//quality=STRING
		public Assignment getQualityAssignment_2() { return cQualityAssignment_2; }
		
		//STRING
		public RuleCall getQualitySTRINGTerminalRuleCall_2_0() { return cQualitySTRINGTerminalRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//rules+=Rule
		public Assignment getRulesAssignment_4() { return cRulesAssignment_4; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_4_0() { return cRulesRuleParserRuleCall_4_0; }
		
		//(',' rules+=Rule)*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//rules+=Rule
		public Assignment getRulesAssignment_5_1() { return cRulesAssignment_5_1; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_5_1_0() { return cRulesRuleParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cQualitiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQualitiesSTRINGTerminalRuleCall_2_0 = (RuleCall)cQualitiesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cQualitiesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cQualitiesSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cQualitiesAssignment_3_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cEntriesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEntriesEntryParserRuleCall_5_0 = (RuleCall)cEntriesAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cEntriesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cEntriesEntryParserRuleCall_6_1_0 = (RuleCall)cEntriesAssignment_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Rule:
		//	'Rule' '(' qualities+=STRING (',' qualities+=STRING)* '=' entries+=Entry (',' entries+=Entry)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Rule' '(' qualities+=STRING (',' qualities+=STRING)* '=' entries+=Entry (',' entries+=Entry)* ')'
		public Group getGroup() { return cGroup; }
		
		//'Rule'
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//qualities+=STRING
		public Assignment getQualitiesAssignment_2() { return cQualitiesAssignment_2; }
		
		//STRING
		public RuleCall getQualitiesSTRINGTerminalRuleCall_2_0() { return cQualitiesSTRINGTerminalRuleCall_2_0; }
		
		//(',' qualities+=STRING)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//qualities+=STRING
		public Assignment getQualitiesAssignment_3_1() { return cQualitiesAssignment_3_1; }
		
		//STRING
		public RuleCall getQualitiesSTRINGTerminalRuleCall_3_1_0() { return cQualitiesSTRINGTerminalRuleCall_3_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//entries+=Entry
		public Assignment getEntriesAssignment_5() { return cEntriesAssignment_5; }
		
		//Entry
		public RuleCall getEntriesEntryParserRuleCall_5_0() { return cEntriesEntryParserRuleCall_5_0; }
		
		//(',' entries+=Entry)*
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//entries+=Entry
		public Assignment getEntriesAssignment_6_1() { return cEntriesAssignment_6_1; }
		
		//Entry
		public RuleCall getEntriesEntryParserRuleCall_6_1_0() { return cEntriesEntryParserRuleCall_6_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class EntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.Entry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cKeyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKeySTRINGTerminalRuleCall_2_0 = (RuleCall)cKeyAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cKeyAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cKeySTRINGTerminalRuleCall_3_1_0 = (RuleCall)cKeyAssignment_3_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueSTRINGTerminalRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Entry:
		//	'Entry' '(' key+=STRING (',' key+=STRING)* '=' value=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Entry' '(' key+=STRING (',' key+=STRING)* '=' value=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//'Entry'
		public Keyword getEntryKeyword_0() { return cEntryKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//key+=STRING
		public Assignment getKeyAssignment_2() { return cKeyAssignment_2; }
		
		//STRING
		public RuleCall getKeySTRINGTerminalRuleCall_2_0() { return cKeySTRINGTerminalRuleCall_2_0; }
		
		//(',' key+=STRING)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//key+=STRING
		public Assignment getKeyAssignment_3_1() { return cKeyAssignment_3_1; }
		
		//STRING
		public RuleCall getKeySTRINGTerminalRuleCall_3_1_0() { return cKeySTRINGTerminalRuleCall_3_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//value=STRING
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_5_0() { return cValueSTRINGTerminalRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class NumericValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.NumericValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueTypeIDTerminalRuleCall_0_0 = (RuleCall)cValueTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTransformationTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTransformationTypeTransformationTypeEnumRuleCall_2_0 = (RuleCall)cTransformationTypeAssignment_2.eContents().get(0);
		private final Assignment cTransformationNumberAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTransformationNumberNUMBERTerminalRuleCall_3_0 = (RuleCall)cTransformationNumberAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//NumericValue:
		//	valueType=ID '(' transformationType=TransformationType transformationNumber=NUMBER ')';
		@Override public ParserRule getRule() { return rule; }
		
		//valueType=ID '(' transformationType=TransformationType transformationNumber=NUMBER ')'
		public Group getGroup() { return cGroup; }
		
		//valueType=ID
		public Assignment getValueTypeAssignment_0() { return cValueTypeAssignment_0; }
		
		//ID
		public RuleCall getValueTypeIDTerminalRuleCall_0_0() { return cValueTypeIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//transformationType=TransformationType
		public Assignment getTransformationTypeAssignment_2() { return cTransformationTypeAssignment_2; }
		
		//TransformationType
		public RuleCall getTransformationTypeTransformationTypeEnumRuleCall_2_0() { return cTransformationTypeTransformationTypeEnumRuleCall_2_0; }
		
		//transformationNumber=NUMBER
		public Assignment getTransformationNumberAssignment_3() { return cTransformationNumberAssignment_3; }
		
		//NUMBER
		public RuleCall getTransformationNumberNUMBERTerminalRuleCall_3_0() { return cTransformationNumberNUMBERTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	
	public class ComponentTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.ComponentType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANYAnyComponentTypeKeyword_0_0 = (Keyword)cANYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBASICEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBASICBasicKeyword_1_0 = (Keyword)cBASICEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCOMPOSITEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCOMPOSITECompositeKeyword_2_0 = (Keyword)cCOMPOSITEEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ComponentType:
		//	ANY='AnyComponentType' | BASIC='Basic' | COMPOSITE='Composite';
		public EnumRule getRule() { return rule; }
		
		//ANY='AnyComponentType' | BASIC='Basic' | COMPOSITE='Composite'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ANY='AnyComponentType'
		public EnumLiteralDeclaration getANYEnumLiteralDeclaration_0() { return cANYEnumLiteralDeclaration_0; }
		
		//'AnyComponentType'
		public Keyword getANYAnyComponentTypeKeyword_0_0() { return cANYAnyComponentTypeKeyword_0_0; }
		
		//BASIC='Basic'
		public EnumLiteralDeclaration getBASICEnumLiteralDeclaration_1() { return cBASICEnumLiteralDeclaration_1; }
		
		//'Basic'
		public Keyword getBASICBasicKeyword_1_0() { return cBASICBasicKeyword_1_0; }
		
		//COMPOSITE='Composite'
		public EnumLiteralDeclaration getCOMPOSITEEnumLiteralDeclaration_2() { return cCOMPOSITEEnumLiteralDeclaration_2; }
		
		//'Composite'
		public Keyword getCOMPOSITECompositeKeyword_2_0() { return cCOMPOSITECompositeKeyword_2_0; }
	}
	public class RoleTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.RoleType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANYAnyRoleTypeKeyword_0_0 = (Keyword)cANYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCOMPONENT_REQUIRED_PROVIDEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCOMPONENT_REQUIRED_PROVIDEDComponentRequiredProvidedKeyword_1_0 = (Keyword)cCOMPONENT_REQUIRED_PROVIDEDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCOMPONENT_REQUIREDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCOMPONENT_REQUIREDComponentRequiredKeyword_2_0 = (Keyword)cCOMPONENT_REQUIREDEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCOMPONENT_PROVIDEDEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCOMPONENT_PROVIDEDComponentProvidedKeyword_3_0 = (Keyword)cCOMPONENT_PROVIDEDEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cINFRASTRUCTURE_REQUIRED_PROVIDEDEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cINFRASTRUCTURE_REQUIRED_PROVIDEDInfrastructureRequiredProvidedKeyword_4_0 = (Keyword)cINFRASTRUCTURE_REQUIRED_PROVIDEDEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cINFRASTRUCTURE_REQUIREDEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cINFRASTRUCTURE_REQUIREDInfrastructureRequiredKeyword_5_0 = (Keyword)cINFRASTRUCTURE_REQUIREDEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cINFRASTRUCTURE_PROVIDEDEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cINFRASTRUCTURE_PROVIDEDInfrastructureProvidedKeyword_6_0 = (Keyword)cINFRASTRUCTURE_PROVIDEDEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum RoleType:
		//	ANY='AnyRoleType' | COMPONENT_REQUIRED_PROVIDED='ComponentRequiredProvided' |
		//	COMPONENT_REQUIRED='ComponentRequired' | COMPONENT_PROVIDED='ComponentProvided' |
		//	INFRASTRUCTURE_REQUIRED_PROVIDED='InfrastructureRequiredProvided' |
		//	INFRASTRUCTURE_REQUIRED='InfrastructureRequired' | INFRASTRUCTURE_PROVIDED='InfrastructureProvided';
		public EnumRule getRule() { return rule; }
		
		//ANY='AnyRoleType' | COMPONENT_REQUIRED_PROVIDED='ComponentRequiredProvided' | COMPONENT_REQUIRED='ComponentRequired' |
		//COMPONENT_PROVIDED='ComponentProvided' | INFRASTRUCTURE_REQUIRED_PROVIDED='InfrastructureRequiredProvided' |
		//INFRASTRUCTURE_REQUIRED='InfrastructureRequired' | INFRASTRUCTURE_PROVIDED='InfrastructureProvided'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ANY='AnyRoleType'
		public EnumLiteralDeclaration getANYEnumLiteralDeclaration_0() { return cANYEnumLiteralDeclaration_0; }
		
		//'AnyRoleType'
		public Keyword getANYAnyRoleTypeKeyword_0_0() { return cANYAnyRoleTypeKeyword_0_0; }
		
		//COMPONENT_REQUIRED_PROVIDED='ComponentRequiredProvided'
		public EnumLiteralDeclaration getCOMPONENT_REQUIRED_PROVIDEDEnumLiteralDeclaration_1() { return cCOMPONENT_REQUIRED_PROVIDEDEnumLiteralDeclaration_1; }
		
		//'ComponentRequiredProvided'
		public Keyword getCOMPONENT_REQUIRED_PROVIDEDComponentRequiredProvidedKeyword_1_0() { return cCOMPONENT_REQUIRED_PROVIDEDComponentRequiredProvidedKeyword_1_0; }
		
		//COMPONENT_REQUIRED='ComponentRequired'
		public EnumLiteralDeclaration getCOMPONENT_REQUIREDEnumLiteralDeclaration_2() { return cCOMPONENT_REQUIREDEnumLiteralDeclaration_2; }
		
		//'ComponentRequired'
		public Keyword getCOMPONENT_REQUIREDComponentRequiredKeyword_2_0() { return cCOMPONENT_REQUIREDComponentRequiredKeyword_2_0; }
		
		//COMPONENT_PROVIDED='ComponentProvided'
		public EnumLiteralDeclaration getCOMPONENT_PROVIDEDEnumLiteralDeclaration_3() { return cCOMPONENT_PROVIDEDEnumLiteralDeclaration_3; }
		
		//'ComponentProvided'
		public Keyword getCOMPONENT_PROVIDEDComponentProvidedKeyword_3_0() { return cCOMPONENT_PROVIDEDComponentProvidedKeyword_3_0; }
		
		//INFRASTRUCTURE_REQUIRED_PROVIDED='InfrastructureRequiredProvided'
		public EnumLiteralDeclaration getINFRASTRUCTURE_REQUIRED_PROVIDEDEnumLiteralDeclaration_4() { return cINFRASTRUCTURE_REQUIRED_PROVIDEDEnumLiteralDeclaration_4; }
		
		//'InfrastructureRequiredProvided'
		public Keyword getINFRASTRUCTURE_REQUIRED_PROVIDEDInfrastructureRequiredProvidedKeyword_4_0() { return cINFRASTRUCTURE_REQUIRED_PROVIDEDInfrastructureRequiredProvidedKeyword_4_0; }
		
		//INFRASTRUCTURE_REQUIRED='InfrastructureRequired'
		public EnumLiteralDeclaration getINFRASTRUCTURE_REQUIREDEnumLiteralDeclaration_5() { return cINFRASTRUCTURE_REQUIREDEnumLiteralDeclaration_5; }
		
		//'InfrastructureRequired'
		public Keyword getINFRASTRUCTURE_REQUIREDInfrastructureRequiredKeyword_5_0() { return cINFRASTRUCTURE_REQUIREDInfrastructureRequiredKeyword_5_0; }
		
		//INFRASTRUCTURE_PROVIDED='InfrastructureProvided'
		public EnumLiteralDeclaration getINFRASTRUCTURE_PROVIDEDEnumLiteralDeclaration_6() { return cINFRASTRUCTURE_PROVIDEDEnumLiteralDeclaration_6; }
		
		//'InfrastructureProvided'
		public Keyword getINFRASTRUCTURE_PROVIDEDInfrastructureProvidedKeyword_6_0() { return cINFRASTRUCTURE_PROVIDEDInfrastructureProvidedKeyword_6_0; }
	}
	public class AssemblyTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.AssemblyType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANYAnyAssemblyKeyword_0_0 = (Keyword)cANYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cREQUIREDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cREQUIREDRequiredKeyword_1_0 = (Keyword)cREQUIREDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPROVIDEDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPROVIDEDProvidedKeyword_2_0 = (Keyword)cPROVIDEDEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum AssemblyType:
		//	ANY='AnyAssembly' | REQUIRED='Required' | PROVIDED='Provided';
		public EnumRule getRule() { return rule; }
		
		//ANY='AnyAssembly' | REQUIRED='Required' | PROVIDED='Provided'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ANY='AnyAssembly'
		public EnumLiteralDeclaration getANYEnumLiteralDeclaration_0() { return cANYEnumLiteralDeclaration_0; }
		
		//'AnyAssembly'
		public Keyword getANYAnyAssemblyKeyword_0_0() { return cANYAnyAssemblyKeyword_0_0; }
		
		//REQUIRED='Required'
		public EnumLiteralDeclaration getREQUIREDEnumLiteralDeclaration_1() { return cREQUIREDEnumLiteralDeclaration_1; }
		
		//'Required'
		public Keyword getREQUIREDRequiredKeyword_1_0() { return cREQUIREDRequiredKeyword_1_0; }
		
		//PROVIDED='Provided'
		public EnumLiteralDeclaration getPROVIDEDEnumLiteralDeclaration_2() { return cPROVIDEDEnumLiteralDeclaration_2; }
		
		//'Provided'
		public Keyword getPROVIDEDProvidedKeyword_2_0() { return cPROVIDEDProvidedKeyword_2_0; }
	}
	public class TransformationTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.TransformationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cISEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cISEqualsSignKeyword_0_0 = (Keyword)cISEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPLUSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPLUSPlusSignKeyword_1_0 = (Keyword)cPLUSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMINUSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMINUSHyphenMinusKeyword_2_0 = (Keyword)cMINUSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMULTIPLICATIONEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMULTIPLICATIONAsteriskKeyword_3_0 = (Keyword)cMULTIPLICATIONEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDIVISIONEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDIVISIONSolidusKeyword_4_0 = (Keyword)cDIVISIONEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum TransformationType:
		//	IS='=' | PLUS='+' | MINUS='-' | MULTIPLICATION='*' | DIVISION='/';
		public EnumRule getRule() { return rule; }
		
		//IS='=' | PLUS='+' | MINUS='-' | MULTIPLICATION='*' | DIVISION='/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IS='='
		public EnumLiteralDeclaration getISEnumLiteralDeclaration_0() { return cISEnumLiteralDeclaration_0; }
		
		//'='
		public Keyword getISEqualsSignKeyword_0_0() { return cISEqualsSignKeyword_0_0; }
		
		//PLUS='+'
		public EnumLiteralDeclaration getPLUSEnumLiteralDeclaration_1() { return cPLUSEnumLiteralDeclaration_1; }
		
		//'+'
		public Keyword getPLUSPlusSignKeyword_1_0() { return cPLUSPlusSignKeyword_1_0; }
		
		//MINUS='-'
		public EnumLiteralDeclaration getMINUSEnumLiteralDeclaration_2() { return cMINUSEnumLiteralDeclaration_2; }
		
		//'-'
		public Keyword getMINUSHyphenMinusKeyword_2_0() { return cMINUSHyphenMinusKeyword_2_0; }
		
		//MULTIPLICATION='*'
		public EnumLiteralDeclaration getMULTIPLICATIONEnumLiteralDeclaration_3() { return cMULTIPLICATIONEnumLiteralDeclaration_3; }
		
		//'*'
		public Keyword getMULTIPLICATIONAsteriskKeyword_3_0() { return cMULTIPLICATIONAsteriskKeyword_3_0; }
		
		//DIVISION='/'
		public EnumLiteralDeclaration getDIVISIONEnumLiteralDeclaration_4() { return cDIVISIONEnumLiteralDeclaration_4; }
		
		//'/'
		public Keyword getDIVISIONSolidusKeyword_4_0() { return cDIVISIONSolidusKeyword_4_0; }
	}
	
	private final ModelElements pModel;
	private final QualityEffectSpecificationElements pQualityEffectSpecification;
	private final ComponentSpecificationElements pComponentSpecification;
	private final ComponentPropertyElements pComponentProperty;
	private final NameElements pName;
	private final IdentifierElements pIdentifier;
	private final AnnotationElements pAnnotation;
	private final TypeElements pType;
	private final ComponentTypeElements eComponentType;
	private final RoleElements pRole;
	private final RoleTypeElements eRoleType;
	private final RolePropertyElements pRoleProperty;
	private final AssemblyElements pAssembly;
	private final AssemblyTypeElements eAssemblyType;
	private final ResourceElements pResource;
	private final ResourcePropertyElements pResourceProperty;
	private final TransformationSpecificationElements pTransformationSpecification;
	private final NQAElements pNQA;
	private final TransformationTypeElements eTransformationType;
	private final ReasoningElements pReasoning;
	private final RuleElements pRule;
	private final EntryElements pEntry;
	private final NumericValueElements pNumericValue;
	private final TerminalRule tNUMBER;
	private final TerminalRule tNL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public QualityEffectSpecificationGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pQualityEffectSpecification = new QualityEffectSpecificationElements();
		this.pComponentSpecification = new ComponentSpecificationElements();
		this.pComponentProperty = new ComponentPropertyElements();
		this.pName = new NameElements();
		this.pIdentifier = new IdentifierElements();
		this.pAnnotation = new AnnotationElements();
		this.pType = new TypeElements();
		this.eComponentType = new ComponentTypeElements();
		this.pRole = new RoleElements();
		this.eRoleType = new RoleTypeElements();
		this.pRoleProperty = new RolePropertyElements();
		this.pAssembly = new AssemblyElements();
		this.eAssemblyType = new AssemblyTypeElements();
		this.pResource = new ResourceElements();
		this.pResourceProperty = new ResourcePropertyElements();
		this.pTransformationSpecification = new TransformationSpecificationElements();
		this.pNQA = new NQAElements();
		this.eTransformationType = new TransformationTypeElements();
		this.pReasoning = new ReasoningElements();
		this.pRule = new RuleElements();
		this.pEntry = new EntryElements();
		this.pNumericValue = new NumericValueElements();
		this.tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.NUMBER");
		this.tNL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.qes.QualityEffectSpecification.NL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.palladiosimulator.qes.QualityEffectSpecification".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	specifications+=QualityEffectSpecification (NL+ specifications+=QualityEffectSpecification)* NL+;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//QualityEffectSpecification:
	//	'For' '{' components+=ComponentSpecification ('and' components+=ComponentSpecification)* '}' 'Do' '{'
	//	transformations+=TransformationSpecification ('and' transformations+=TransformationSpecification)* '}';
	public QualityEffectSpecificationElements getQualityEffectSpecificationAccess() {
		return pQualityEffectSpecification;
	}
	
	public ParserRule getQualityEffectSpecificationRule() {
		return getQualityEffectSpecificationAccess().getRule();
	}
	
	//ComponentSpecification:
	//	'Component' '(' properties+=ComponentProperty ('and' properties+=ComponentProperty)* ')';
	public ComponentSpecificationElements getComponentSpecificationAccess() {
		return pComponentSpecification;
	}
	
	public ParserRule getComponentSpecificationRule() {
		return getComponentSpecificationAccess().getRule();
	}
	
	//ComponentProperty:
	//	Name | Identifier | Annotation | Type | Role | Assembly | Resource;
	public ComponentPropertyElements getComponentPropertyAccess() {
		return pComponentProperty;
	}
	
	public ParserRule getComponentPropertyRule() {
		return getComponentPropertyAccess().getRule();
	}
	
	//Name:
	//	'Name' '(' not?='not'? autonym=STRING ')';
	public NameElements getNameAccess() {
		return pName;
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}
	
	//Identifier:
	//	'Id' '(' not?='not'? id=STRING ')';
	public IdentifierElements getIdentifierAccess() {
		return pIdentifier;
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}
	
	//Annotation:
	//	'Annotation' '(' not?='not'? annotation=STRING ')';
	public AnnotationElements getAnnotationAccess() {
		return pAnnotation;
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}
	
	//Type:
	//	'Type' '(' not?='not'? type=ComponentType ')';
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//enum ComponentType:
	//	ANY='AnyComponentType' | BASIC='Basic' | COMPOSITE='Composite';
	public ComponentTypeElements getComponentTypeAccess() {
		return eComponentType;
	}
	
	public EnumRule getComponentTypeRule() {
		return getComponentTypeAccess().getRule();
	}
	
	//Role:
	//	'Role' '(' not?='not'? type=RoleType 'with' properties+=RoleProperty ('and' properties+=RoleProperty)* ')';
	public RoleElements getRoleAccess() {
		return pRole;
	}
	
	public ParserRule getRoleRule() {
		return getRoleAccess().getRule();
	}
	
	//enum RoleType:
	//	ANY='AnyRoleType' | COMPONENT_REQUIRED_PROVIDED='ComponentRequiredProvided' |
	//	COMPONENT_REQUIRED='ComponentRequired' | COMPONENT_PROVIDED='ComponentProvided' |
	//	INFRASTRUCTURE_REQUIRED_PROVIDED='InfrastructureRequiredProvided' |
	//	INFRASTRUCTURE_REQUIRED='InfrastructureRequired' | INFRASTRUCTURE_PROVIDED='InfrastructureProvided';
	public RoleTypeElements getRoleTypeAccess() {
		return eRoleType;
	}
	
	public EnumRule getRoleTypeRule() {
		return getRoleTypeAccess().getRule();
	}
	
	//RoleProperty:
	//	Name | Identifier | Annotation;
	public RolePropertyElements getRolePropertyAccess() {
		return pRoleProperty;
	}
	
	public ParserRule getRolePropertyRule() {
		return getRolePropertyAccess().getRule();
	}
	
	//Assembly:
	//	'Assembly' '(' not?='not'? type=AssemblyType 'with' component=ComponentSpecification ')';
	public AssemblyElements getAssemblyAccess() {
		return pAssembly;
	}
	
	public ParserRule getAssemblyRule() {
		return getAssemblyAccess().getRule();
	}
	
	//enum AssemblyType:
	//	ANY='AnyAssembly' | REQUIRED='Required' | PROVIDED='Provided';
	public AssemblyTypeElements getAssemblyTypeAccess() {
		return eAssemblyType;
	}
	
	public EnumRule getAssemblyTypeRule() {
		return getAssemblyTypeAccess().getRule();
	}
	
	//Resource:
	//	'Resource' '(' properties+=ResourceProperty ('and' properties+=ResourceProperty)* ')';
	public ResourceElements getResourceAccess() {
		return pResource;
	}
	
	public ParserRule getResourceRule() {
		return getResourceAccess().getRule();
	}
	
	//ResourceProperty:
	//	Name | Identifier;
	public ResourcePropertyElements getResourcePropertyAccess() {
		return pResourceProperty;
	}
	
	public ParserRule getResourcePropertyRule() {
		return getResourcePropertyAccess().getRule();
	}
	
	//TransformationSpecification:
	//	NQA | Reasoning | NumericValue;
	public TransformationSpecificationElements getTransformationSpecificationAccess() {
		return pTransformationSpecification;
	}
	
	public ParserRule getTransformationSpecificationRule() {
		return getTransformationSpecificationAccess().getRule();
	}
	
	//NQA:
	//	'NQA' '(' quality=STRING type=TransformationType element=STRING ')';
	public NQAElements getNQAAccess() {
		return pNQA;
	}
	
	public ParserRule getNQARule() {
		return getNQAAccess().getRule();
	}
	
	//enum TransformationType:
	//	IS='=' | PLUS='+' | MINUS='-' | MULTIPLICATION='*' | DIVISION='/';
	public TransformationTypeElements getTransformationTypeAccess() {
		return eTransformationType;
	}
	
	public EnumRule getTransformationTypeRule() {
		return getTransformationTypeAccess().getRule();
	}
	
	//Reasoning:
	//	'Reasoning' '(' quality=STRING '=' rules+=Rule (',' rules+=Rule)* ')';
	public ReasoningElements getReasoningAccess() {
		return pReasoning;
	}
	
	public ParserRule getReasoningRule() {
		return getReasoningAccess().getRule();
	}
	
	//Rule:
	//	'Rule' '(' qualities+=STRING (',' qualities+=STRING)* '=' entries+=Entry (',' entries+=Entry)* ')';
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//Entry:
	//	'Entry' '(' key+=STRING (',' key+=STRING)* '=' value=STRING ')';
	public EntryElements getEntryAccess() {
		return pEntry;
	}
	
	public ParserRule getEntryRule() {
		return getEntryAccess().getRule();
	}
	
	//NumericValue:
	//	valueType=ID '(' transformationType=TransformationType transformationNumber=NUMBER ')';
	public NumericValueElements getNumericValueAccess() {
		return pNumericValue;
	}
	
	public ParserRule getNumericValueRule() {
		return getNumericValueAccess().getRule();
	}
	
	//terminal NUMBER:
	//	INT ('.' INT)?;
	public TerminalRule getNUMBERRule() {
		return tNUMBER;
	}
	
	//terminal NL:
	//	'\r'? '\n';
	public TerminalRule getNLRule() {
		return tNL;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
