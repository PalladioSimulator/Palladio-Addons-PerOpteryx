/*
 * This simple QVTO SimuLizar reconfiguration rule increases the processing rate of all
 * resources in case the monitored mean response time is greater than 3.0 (seconds). 
 *
 */

/*
 * Two modeltypes are declared. The http NS URIs correspond to those used to register the 
 * Ecore models in the environment. Alternatively, a workspace metamodel may be used 
 * in conjunction with mappings defined in the project properties.
 */
modeltype PRM uses 'http://simulizar.palladiosimulator.org/RuntimeMeasurement/1.0';
modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.2';
modeltype PCM_REP uses 'http://palladiosimulator.org/PalladioComponentModel/Repository/5.2';
modeltype PCM_SEFF uses 'http://palladiosimulator.org/PalladioComponentModel/SEFF/5.2';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.2';
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.2';
modeltype PCM_RES_TYPE uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceType/5.2';
modeltype PCM_USAGE uses 'http://palladiosimulator.org/PalladioComponentModel/UsageModel/5.2';
modeltype PCM_FEATURE_CONF uses 'http://sdq.ipd.uka.de/FeatureConfig/2.0';
modeltype PCM_FEATURE_MOD uses 'http://sdq.ipd.uka.de/FeatureModel/2.0';
modeltype PCM_CORE uses 'http://palladiosimulator.org/PalladioComponentModel/Core/5.2';
modeltype PCM_COMP uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Composition/5.2';
modeltype PCM_ENTITY uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Entity/5.2';
modeltype PCM_PARAM uses 'http://palladiosimulator.org/PalladioComponentModel/Parameter/5.2';
modeltype PCM_STOEX uses 'http://sdq.ipd.uka.de/StochasticExpressions/2.2';

/*
 * The transformation signature declares that a PRM modeltype is required as input, while an PCM
 * modeltype is transformed inplace. The PRM modeltype is referenced as 'prm' throughout the 
 * transformation definition, while no name is needed for the output PCM modeltype. Note that OCL 
 * type and namespace notation are used in operational QVT (: and :: respectively).
 */
transformation ScaleDown(		in prm : PRM,
							in pcmAllocation : PCM_ALLOC) {
							
							
	// Define Threshold and Scale Down
	property threshold : Real = 1.0;
	property scaleDown : Real = 50.0;

	/**
	 * The main transformation.
	 * This is the entry point to the overall transformation.
	 */
	main() {
	

		log('SimuLizar ScaleDown Rule Transformation started');
		
		assert fatal(prm.rootObjects()[RuntimeMeasurement]->size() > 0)
			with log ("No Measurements found!");
			
		assert fatal(pcmAllocation.rootObjects()[Allocation]->size() > 0)
			with log ("Allocation Model is empty!");
		
		var runtimeMeasurements = prm.rootObjects()[RuntimeMeasurement];
		// Scale down processing speed for all Resources
		pcmAllocation.rootObjects()[Allocation]->forAll(
			allocation : Allocation | 
			scaleDownProcessingResources(allocation.targetResourceEnvironment_Allocation, runtimeMeasurements)
		);

	}
	
	helper checkCondition(runtimeMeasurements : Set(RuntimeMeasurement)) : Boolean {
		return runtimeMeasurements->exists(measuringValue < threshold);
	}
	
	/**
	 * Scale down ProcessingResources.
	 */
	helper scaleDownProcessingResources(resourceEnvironment : ResourceEnvironment, runtimeMeasurements : Set(RuntimeMeasurement)) : Boolean {
		if (checkCondition(runtimeMeasurements)) then {
			resourceEnvironment.resourceContainer_ResourceEnvironment->forEach(resourceContainer) {
				scaleDownProcessingResourcesRecursively(resourceContainer);
			};
		
			return true;
		} endif;
		return false;
	}
	
	/**
	 * Recursively scale down ProcessingResources.
	 */
	helper scaleDownProcessingResourcesRecursively(resourceContainer : ResourceContainer) {
	
		// decrease processing rate by scaleDown
		resourceContainer.activeResourceSpecifications_ResourceContainer->forEach(processingResourceSpecification){
			var currentProcessingRate : String := processingResourceSpecification.processingRate_ProcessingResourceSpecification.specification;
	    	if (currentProcessingRate.toReal() - scaleDown > 0.0) {
	    		var newProcessingRate : Real := currentProcessingRate.toReal() - scaleDown;
	    		processingResourceSpecification.processingRate_ProcessingResourceSpecification.specification := newProcessingRate.toString();
	    	} endif;
	    };
	    
	    // recursive call
		resourceContainer.nestedResourceContainers__ResourceContainer->forEach(nestedResourceContainer){
			scaleDownProcessingResourcesRecursively(nestedResourceContainer);
		};		
	}
}