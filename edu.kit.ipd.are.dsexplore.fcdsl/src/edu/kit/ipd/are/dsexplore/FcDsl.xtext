// automatically generated by Xtext
grammar edu.kit.ipd.are.dsexplore.FcDsl with org.eclipse.xtext.common.Terminals

import "http://are.ipd.kit.edu/FeatureObjectivesModel/1.0.0" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://are.ipd.kit.edu/PlacementDescriptionModel/1.0.0" as placementDescription
import "http://are.ipd.kit.edu/FeatureSolutionModel/1.0.0" as featureSolution
import "http://are.ipd.kit.edu/FeatureCompletionModel/1.0.1" as FeatureCompletionModel
import "platform:/resource/org.palladiosimulator.pcm/model/pcm.ecore#//repository" as repository

BehaviourInclusion returns featureSolution::BehaviourInclusion:
	(imports+=Import)*
	(multiple?='multiple')?
	'BehaviourInclusion'
	name=EString
	id=EString
	'{'
		'description' description=EString
		('pointCut' '{' pointCut+=PointCut ( "," pointCut+=PointCut)* '}' )?
		'featureCompletion' featureCompletion=FeatureSelection
		('advice' '{' advice+=Advice ( "," advice+=Advice)* '}' )?
	'}';


InclusionMechanism returns featureSolution::InclusionMechanism:
	BehaviourInclusion
;

PlacementStrategy returns placementDescription::PlacementStrategy:
	PlacementStrategy_Impl | ExternalCallPlacementStrategy | InternalActionPlacementStrategy | ControlFlowPlacementStrategy;



EString returns ecore::EString:
	STRING | ID;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

PointCut returns placementDescription::PointCut:
	{placementDescription::PointCut}
	'PointCut'
	name=EString
	'{'
		('placementStrategy' placementStrategy=PlacementStrategy)?
	'}';

Advice returns placementDescription::Advice:
	'Advice'
	'{'
		'appears' appears=Appearance
		('pointCut' pointCut=[placementDescription::PointCut|EString])?		
		'placementPolicy' placementPolicy=PlacementPolicy
	'}';
	
FeatureSelection returns placementDescription::FeatureSelection:
	Completion=[FeatureCompletionModel::FeatureCompletion|EString]
	'(' featureLists+=FeatureList ( "," featureLists+=FeatureList)* ')'
;

FeatureList returns placementDescription::FeatureList:
	'{' features+=SelectedCV ( "," features+=SelectedCV)* '}'
;

SelectedCV returns placementDescription::SelectedCV:
	(optional?='optional')? complementumVisnetis=[FeatureCompletionModel::ComplementumVisnetis|EString]; 

Import returns placementDescription::Import:
	'import' importURI=EString ;

PlacementStrategy_Impl returns placementDescription::PlacementStrategy:
	{placementDescription::PlacementStrategy}
	'PlacementStrategy'
	;

ExternalCallPlacementStrategy returns placementDescription::ExternalCallPlacementStrategy:
	{placementDescription::ExternalCallPlacementStrategy}
	'ExternalCallPlacementStrategy'
	'{'
		('matchingSignature' matchingSignature=[repository::Signature|EString])?
	'}';

InternalActionPlacementStrategy returns placementDescription::InternalActionPlacementStrategy:
	{placementDescription::InternalActionPlacementStrategy}
	'InternalActionPlacementStrategy'
	'{'
		('forAllInternalActionsIn' forAllInternalActionsIn=[repository::RepositoryComponent|EString])?
	'}';

ControlFlowPlacementStrategy returns placementDescription::ControlFlowPlacementStrategy:
	{placementDescription::ControlFlowPlacementStrategy}
	'ControlFlowPlacementStrategy'
	'{'
		('forAllControlFlowsIn' forAllControlFlowsIn=[repository::RepositoryComponent|EString])?
	'}';


enum Appearance returns featureSolution::Appearance:
				BEFORE = 'BEFORE' | AFTER = 'AFTER' | AROUND = 'AROUND';

enum PlacementPolicy returns FeatureCompletionModel::PlacementPolicy:
				MANDATORY = 'MANDATORY' | OPTIONAL = 'OPTIONAL';
