/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package de.uka.ipd.sdq.dsexplore.qml.contracttype.QMLContractType.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import de.uka.ipd.sdq.dsexplore.qml.contracttype.QMLContractType.util.QMLContractTypeAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers. The
 * adapters generated by this factory convert EMF adapter notifications into calls to
 * {@link #fireNotifyChanged fireNotifyChanged}. The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances. <!-- begin-user-doc --> <!--
 * end-user-doc -->
 *
 * @generated
 */
public class QMLContractTypeItemProviderAdapterFactory extends QMLContractTypeAdapterFactory implements
        ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType
     * isFactoryForType}. <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
     * This constructs an instance. <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    public QMLContractTypeItemProviderAdapterFactory() {
        this.supportedTypes.add(IEditingDomainItemProvider.class);
        this.supportedTypes.add(IStructuredItemContentProvider.class);
        this.supportedTypes.add(ITreeItemContentProvider.class);
        this.supportedTypes.add(IItemLabelProvider.class);
        this.supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.uka.ipd.sdq.dsexplore.qml.contracttype.QMLContractType.DimensionTypeSet} instances.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected DimensionTypeSetItemProvider dimensionTypeSetItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.uka.ipd.sdq.dsexplore.qml.contracttype.QMLContractType.DimensionTypeSet}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createDimensionTypeSetAdapter() {
        if (this.dimensionTypeSetItemProvider == null)
        {
            this.dimensionTypeSetItemProvider = new DimensionTypeSetItemProvider(this);
        }

        return this.dimensionTypeSetItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.uka.ipd.sdq.dsexplore.qml.contracttype.QMLContractType.RelationSemantics}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected RelationSemanticsItemProvider relationSemanticsItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.uka.ipd.sdq.dsexplore.qml.contracttype.QMLContractType.RelationSemantics}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createRelationSemanticsAdapter() {
        if (this.relationSemanticsItemProvider == null)
        {
            this.relationSemanticsItemProvider = new RelationSemanticsItemProvider(this);
        }

        return this.relationSemanticsItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.uka.ipd.sdq.dsexplore.qml.contracttype.QMLContractType.Element} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected ElementItemProvider elementItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.uka.ipd.sdq.dsexplore.qml.contracttype.QMLContractType.Element}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createElementAdapter() {
        if (this.elementItemProvider == null)
        {
            this.elementItemProvider = new ElementItemProvider(this);
        }

        return this.elementItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.uka.ipd.sdq.dsexplore.qml.contracttype.QMLContractType.Order} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected OrderItemProvider orderItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.uka.ipd.sdq.dsexplore.qml.contracttype.QMLContractType.Order}. <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createOrderAdapter() {
        if (this.orderItemProvider == null)
        {
            this.orderItemProvider = new OrderItemProvider(this);
        }

        return this.orderItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.uka.ipd.sdq.dsexplore.qml.contracttype.QMLContractType.DimensionTypeEnum}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected DimensionTypeEnumItemProvider dimensionTypeEnumItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.uka.ipd.sdq.dsexplore.qml.contracttype.QMLContractType.DimensionTypeEnum}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createDimensionTypeEnumAdapter() {
        if (this.dimensionTypeEnumItemProvider == null)
        {
            this.dimensionTypeEnumItemProvider = new DimensionTypeEnumItemProvider(this);
        }

        return this.dimensionTypeEnumItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.uka.ipd.sdq.dsexplore.qml.contracttype.QMLContractType.Unit} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected UnitItemProvider unitItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.uka.ipd.sdq.dsexplore.qml.contracttype.QMLContractType.Unit}. <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createUnitAdapter() {
        if (this.unitItemProvider == null)
        {
            this.unitItemProvider = new UnitItemProvider(this);
        }

        return this.unitItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.uka.ipd.sdq.dsexplore.qml.contracttype.QMLContractType.DimensionTypeNumeric}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected DimensionTypeNumericItemProvider dimensionTypeNumericItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.uka.ipd.sdq.dsexplore.qml.contracttype.QMLContractType.DimensionTypeNumeric}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createDimensionTypeNumericAdapter() {
        if (this.dimensionTypeNumericItemProvider == null)
        {
            this.dimensionTypeNumericItemProvider = new DimensionTypeNumericItemProvider(this);
        }

        return this.dimensionTypeNumericItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.uka.ipd.sdq.dsexplore.qml.contracttype.QMLContractType.NumericRange} instances.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected NumericRangeItemProvider numericRangeItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.uka.ipd.sdq.dsexplore.qml.contracttype.QMLContractType.NumericRange}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createNumericRangeAdapter() {
        if (this.numericRangeItemProvider == null)
        {
            this.numericRangeItemProvider = new NumericRangeItemProvider(this);
        }

        return this.numericRangeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.uka.ipd.sdq.dsexplore.qml.contracttype.QMLContractType.QMLContractType} instances.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected QMLContractTypeItemProvider qmlContractTypeItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.uka.ipd.sdq.dsexplore.qml.contracttype.QMLContractType.QMLContractType}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createQMLContractTypeAdapter() {
        if (this.qmlContractTypeItemProvider == null)
        {
            this.qmlContractTypeItemProvider = new QMLContractTypeItemProvider(this);
        }

        return this.qmlContractTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.uka.ipd.sdq.dsexplore.qml.contracttype.QMLContractType.UnitRepository} instances.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected UnitRepositoryItemProvider unitRepositoryItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.uka.ipd.sdq.dsexplore.qml.contracttype.QMLContractType.UnitRepository}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createUnitRepositoryAdapter() {
        if (this.unitRepositoryItemProvider == null)
        {
            this.unitRepositoryItemProvider = new UnitRepositoryItemProvider(this);
        }

        return this.unitRepositoryItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.uka.ipd.sdq.dsexplore.qml.contracttype.QMLContractType.DimensionTypeRepository}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected DimensionTypeRepositoryItemProvider dimensionTypeRepositoryItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.uka.ipd.sdq.dsexplore.qml.contracttype.QMLContractType.DimensionTypeRepository}.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createDimensionTypeRepositoryAdapter() {
        if (this.dimensionTypeRepositoryItemProvider == null)
        {
            this.dimensionTypeRepositoryItemProvider = new DimensionTypeRepositoryItemProvider(this);
        }

        return this.dimensionTypeRepositoryItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.uka.ipd.sdq.dsexplore.qml.contracttype.QMLContractType.Dimension} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected DimensionItemProvider dimensionItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.uka.ipd.sdq.dsexplore.qml.contracttype.QMLContractType.Dimension}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createDimensionAdapter() {
        if (this.dimensionItemProvider == null)
        {
            this.dimensionItemProvider = new DimensionItemProvider(this);
        }

        return this.dimensionItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory. <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return this.parentAdapterFactory == null ? this : this.parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory. <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public void setParentAdapterFactory(final ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public boolean isFactoryForType(final Object type) {
        return this.supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter adapt(final Notifier notifier, final Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Object adapt(final Object object, final Object type) {
        if (this.isFactoryForType(type))
        {
            final Object adapter = super.adapt(object, type);
            if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter)))
            {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public void addListener(final INotifyChangedListener notifyChangedListener) {
        this.changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public void removeListener(final INotifyChangedListener notifyChangedListener) {
        this.changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public void fireNotifyChanged(final Notification notification) {
        this.changeNotifier.fireNotifyChanged(notification);

        if (this.parentAdapterFactory != null)
        {
            this.parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     *
     * @generated
     */
    @Override
    public void dispose() {
        if (this.dimensionTypeSetItemProvider != null) {
            this.dimensionTypeSetItemProvider.dispose();
        }
        if (this.relationSemanticsItemProvider != null) {
            this.relationSemanticsItemProvider.dispose();
        }
        if (this.elementItemProvider != null) {
            this.elementItemProvider.dispose();
        }
        if (this.orderItemProvider != null) {
            this.orderItemProvider.dispose();
        }
        if (this.dimensionTypeEnumItemProvider != null) {
            this.dimensionTypeEnumItemProvider.dispose();
        }
        if (this.unitItemProvider != null) {
            this.unitItemProvider.dispose();
        }
        if (this.dimensionTypeNumericItemProvider != null) {
            this.dimensionTypeNumericItemProvider.dispose();
        }
        if (this.numericRangeItemProvider != null) {
            this.numericRangeItemProvider.dispose();
        }
        if (this.qmlContractTypeItemProvider != null) {
            this.qmlContractTypeItemProvider.dispose();
        }
        if (this.unitRepositoryItemProvider != null) {
            this.unitRepositoryItemProvider.dispose();
        }
        if (this.dimensionTypeRepositoryItemProvider != null) {
            this.dimensionTypeRepositoryItemProvider.dispose();
        }
        if (this.dimensionItemProvider != null) {
            this.dimensionItemProvider.dispose();
        }
    }

}
