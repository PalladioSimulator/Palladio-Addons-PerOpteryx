/*
 * generated by Xtext 2.13.0
 */
package edu.kit.ipd.are.dsexplore.scoping

import FeatureCompletionModel.ComplementumVisnetis
import FeatureCompletionModel.FeatureCompletion
import placementDescription.FeatureSelection
import placementDescription.SelectedCV
import java.util.ArrayList
import java.util.List
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.naming.QualifiedName
import org.eclipse.xtext.resource.EObjectDescription
import org.eclipse.xtext.resource.IEObjectDescription
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.impl.SimpleScope
import org.palladiosimulator.pcm.repository.RepositoryComponent
import org.palladiosimulator.pcm.repository.Signature
import placementDescription.Advice
import placementDescription.ControlFlowPlacementStrategy
import placementDescription.ExternalCallPlacementStrategy
import placementDescription.Import
import placementDescription.InternalActionPlacementStrategy
import placementDescription.PlacementDescriptionPackage

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class FcDslScopeProvider extends AbstractFcDslScopeProvider {
	
	private static final String REPOSITORY_FILE_EXTENSION = ".repository"
	private static final String FEATURE_COMPLETION_FILE_EXTENSION = ".featurecompletion"

	override getScope(EObject ctx, EReference ref) {
	   if (ctx instanceof ExternalCallPlacementStrategy && ref == PlacementDescriptionPackage.Literals.EXTERNAL_CALL_PLACEMENT_STRATEGY__MATCHING_SIGNATURE) {
			scope_ExternalCallPlacementStrategy_matchingSignature(ctx as ExternalCallPlacementStrategy, ref)
	   } else if (ctx instanceof InternalActionPlacementStrategy && ref == PlacementDescriptionPackage.Literals.INTERNAL_ACTION_PLACEMENT_STRATEGY__FOR_ALL_INTERNAL_ACTIONS_IN) {
	   		scope_InternalActionPlacementStrategy_forAllInternalActionsIn(ctx as InternalActionPlacementStrategy, ref)
	   } else if (ctx instanceof ControlFlowPlacementStrategy && ref == PlacementDescriptionPackage.Literals.CONTROL_FLOW_PLACEMENT_STRATEGY__FOR_ALL_CONTROL_FLOWS_IN) {
	   		scope_ControlFlowPlacementStrategy_forAllControlFLowsIn(ctx as ControlFlowPlacementStrategy, ref)
//	   } else if (ctx instanceof Advice && ref == FeatureSolutionPackage.Literals.ADVICE__COMPLETION) {
//	   		scope_Advice_completion(ctx as Advice, ref)	
	   } else if (ctx instanceof FeatureSelection && ref == PlacementDescriptionPackage.Literals.FEATURE_SELECTION__COMPLETION) {
	   		scope_FeatureSelection_completion(ctx as FeatureSelection, ref)
	   } else if (ctx instanceof SelectedCV && ref == PlacementDescriptionPackage.Literals.SELECTED_CV__COMPLEMENTUM_VISNETIS) {
	   		scope_SelectedCV_ComplementumVisnetis(ctx as SelectedCV, ref)
	   } else {
	   		super.getScope(ctx, ref)
	   }
	}
	
	def scope_SelectedCV_ComplementumVisnetis(SelectedCV selectedCV, EReference reference) {
		var List<IEObjectDescription> descriptions = new ArrayList<IEObjectDescription>
		
		val rootElement = EcoreUtil2.getRootContainer(selectedCV)
		val resource = getRepositoryResource(rootElement, FEATURE_COMPLETION_FILE_EXTENSION)

		val candidates = EcoreUtil2.getAllContentsOfType(resource.contents.get(0), ComplementumVisnetis)
		
		for (ComplementumVisnetis candidate : candidates) {
			descriptions.add(
				EObjectDescription.create(
					QualifiedName.create(candidate.name), (candidate)))
		}
		return new SimpleScope(IScope.NULLSCOPE, descriptions)
	}
	
	def scope_FeatureSelection_completion(FeatureSelection selection, EReference reference) {
		var List<IEObjectDescription> descriptions = new ArrayList<IEObjectDescription>
		
		val rootElement = EcoreUtil2.getRootContainer(selection)
		val resource = getRepositoryResource(rootElement, FEATURE_COMPLETION_FILE_EXTENSION)

		val candidates = EcoreUtil2.getAllContentsOfType(resource.contents.get(0), FeatureCompletion)
		
		for (FeatureCompletion candidate : candidates) {
			descriptions.add(
				EObjectDescription.create(
					QualifiedName.create(candidate.name), (candidate)))
		}
		return new SimpleScope(IScope.NULLSCOPE, descriptions)
	}
	
	def scope_ControlFlowPlacementStrategy_forAllControlFLowsIn(ControlFlowPlacementStrategy strategy, EReference reference) {
		var List<IEObjectDescription> descriptions = new ArrayList<IEObjectDescription>
		
		val rootElement = EcoreUtil2.getRootContainer(strategy)
		val resource = getRepositoryResource(rootElement, REPOSITORY_FILE_EXTENSION)

		val candidates = EcoreUtil2.getAllContentsOfType(resource.contents.get(0), RepositoryComponent)
		
		for (RepositoryComponent candidate : candidates) {
			descriptions.add(
				EObjectDescription.create(
					QualifiedName.create(candidate.entityName), (candidate)))
		}
		return new SimpleScope(IScope.NULLSCOPE, descriptions)
	}
	
	def scope_InternalActionPlacementStrategy_forAllInternalActionsIn(InternalActionPlacementStrategy strategy, EReference reference) {
		var List<IEObjectDescription> descriptions = new ArrayList<IEObjectDescription>
		
		val rootElement = EcoreUtil2.getRootContainer(strategy)
		val resource = getRepositoryResource(rootElement, REPOSITORY_FILE_EXTENSION)

		val candidates = EcoreUtil2.getAllContentsOfType(resource.contents.get(0), RepositoryComponent)
		
		for (RepositoryComponent candidate : candidates) {
			descriptions.add(
				EObjectDescription.create(
					QualifiedName.create(candidate.entityName), (candidate)))
		}
		return new SimpleScope(IScope.NULLSCOPE, descriptions)
	}
	
	def scope_Advice_completion(Advice advice, EReference reference) {
		var List<IEObjectDescription> descriptions = new ArrayList<IEObjectDescription>
		
		val rootElement = EcoreUtil2.getRootContainer(advice)
		val resource = getRepositoryResource(rootElement, FEATURE_COMPLETION_FILE_EXTENSION)

		val candidates = EcoreUtil2.getAllContentsOfType(resource.contents.get(0), ComplementumVisnetis)
		
		for (ComplementumVisnetis candidate : candidates) {
			descriptions.add(
				EObjectDescription.create(
					QualifiedName.create(candidate.name), (candidate)))
		}
		return new SimpleScope(IScope.NULLSCOPE, descriptions)
	}
	
	def IScope scope_ExternalCallPlacementStrategy_matchingSignature(ExternalCallPlacementStrategy strategy, EReference ref){	
		var List<IEObjectDescription> descriptions = new ArrayList<IEObjectDescription>
		
		val rootElement = EcoreUtil2.getRootContainer(strategy)
		val resource = getRepositoryResource(rootElement, REPOSITORY_FILE_EXTENSION)

		val candidates = EcoreUtil2.getAllContentsOfType(resource.contents.get(0), Signature)
		
		for (Signature candidate : candidates) {
			descriptions.add(
				EObjectDescription.create(
					QualifiedName.create(candidate.entityName), (candidate)))
		}
		return new SimpleScope(IScope.NULLSCOPE, descriptions)
	}
	
	def Resource getRepositoryResource(EObject rootElement, String fileExtension) {
		val importFiles = EcoreUtil2.getAllContentsOfType(rootElement, Import)
		
		val resourceSet = new ResourceSetImpl
		var repositoryURI = ""
		for (Import import : importFiles) {
			if (import.importURI.endsWith(fileExtension)) {
				repositoryURI = import.importURI
			}
		}
		val resource = resourceSet.getResource(URI.createURI(repositoryURI), true)
		resource
	}
}
