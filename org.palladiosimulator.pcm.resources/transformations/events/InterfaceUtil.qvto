import Commons;
import OperationSignatureRegistry;

modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.1';
modeltype PCM_REP uses 'http://palladiosimulator.org/PalladioComponentModel/Repository/5.1';
modeltype PCM_SEFF uses 'http://palladiosimulator.org/PalladioComponentModel/SEFF/5.1';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.1';
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.1';
modeltype PCM_RES_TYPE uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceType/5.1';
modeltype PCM_USAGE uses 'http://palladiosimulator.org/PalladioComponentModel/UsageModel/5.1';
modeltype PCM_FEATURE_CONF uses 'http://sdq.ipd.uka.de/FeatureConfig/2.0';
modeltype PCM_FEATURE_MOD uses 'http://sdq.ipd.uka.de/FeatureModel/2.0';
modeltype PCM_CORE uses 'http://palladiosimulator.org/PalladioComponentModel/Core/5.1';
modeltype PCM_COMP uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Composition/5.1';
modeltype PCM_ENTITY uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Entity/5.1';
modeltype PCM_PARAM uses 'http://palladiosimulator.org/PalladioComponentModel/Parameter/5.1';
modeltype PCM_STOEX uses 'http://sdq.ipd.uka.de/StochasticExpressions/2.2';

/**
 * Library with helpers to create elements
 *
 * @author Benjamin Klatt
 */
library InterfaceUtil;

/**
 * Create the operation interface for an event group.
 * @param EventGroup The event group  to build the interface for
 * @return The prepared operation interface
 */
helper InterfaceUtil_createOperationInterface(eventGroup : EventGroup) : OperationInterface {
	
	var interface := object OperationInterface {
		// build the operation interface
		entityName := 'IHandleEvent'+eventGroup.entityName;
		repository__Interface := eventGroup.repository__Interface;
		requiredCharacterisations := eventGroup.requiredCharacterisations;
		signatures__OperationInterface := eventGroup
											.eventTypes__EventGroup
											->InterfaceUtil_createOperationSignature(eventGroup);
	};
	return interface;																							
}

/**
 * Create an OperationSignature for an EventType
 * The parameter will be the same as of the event type.
 *
 * The source role is handed over to uniquely identify the created operation signature.
 * 
 * @param sourceRole The source role the signature is created for
 */
helper EventType::InterfaceUtil_createOperationSignature(eventGroup : EventGroup) : OperationSignature {
	
	var signature := object OperationSignature {
		entityName := 'handle'+self.entityName;
		parameters__OperationSignature := OrderedSet{self.parameter__EventType};
		exceptions__Signature := self.exceptions__Signature;
		failureType := self.failureType;
	};
	
	// store the signature in the registry
	registerSignature(eventGroup,self,signature);
	
	return signature;
}
