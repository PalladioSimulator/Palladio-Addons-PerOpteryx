import Commons;
import SEFFUtil;
import SEFFRegistry;

modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.1';
modeltype PCM_REP uses 'http://palladiosimulator.org/PalladioComponentModel/Repository/5.1';
modeltype PCM_SEFF uses 'http://palladiosimulator.org/PalladioComponentModel/SEFF/5.1';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.1';
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.1';
modeltype PCM_RES_TYPE uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceType/5.1';
modeltype PCM_USAGE uses 'http://palladiosimulator.org/PalladioComponentModel/UsageModel/5.1';
modeltype PCM_FEATURE_CONF uses 'http://sdq.ipd.uka.de/FeatureConfig/2.0';
modeltype PCM_FEATURE_MOD uses 'http://sdq.ipd.uka.de/FeatureModel/2.0';
modeltype PCM_CORE uses 'http://palladiosimulator.org/PalladioComponentModel/Core/5.1';
modeltype PCM_COMP uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Composition/5.1';
modeltype PCM_ENTITY uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Entity/5.1';
modeltype PCM_PARAM uses 'http://palladiosimulator.org/PalladioComponentModel/Parameter/5.1';
modeltype PCM_STOEX uses 'http://sdq.ipd.uka.de/StochasticExpressions/2.2';

/**
 * Library with helpers to handle SinkPort components.
 *
 * The operations in this section are all about the creation and 
 * management of the SinkPort elements
 *
 * @author Benjamin Klatt
 */
library SinkPort;


/**
 * Create the SinkPort context.
 * 
 * This method creates the basic component and triggers the 
 * deployment of the component on the same assembly as the source component.
 *
 * It returns the assembly context to provide more information
 * then the component definition itself.
 *
 * @param sourceRole 				The original SourceRole this event distribution is about
 * @param sinkRole 					The original SinkRole this event distribution is about
 * @param predecessorRequiredRole 	The required role to connect this component with
 * @param system 					The system the new elements should be placed in
 * @param allocation 				The allocation context to deploy this component
 * @param resourceContainer 		The resource container of the new component
 * @param predecessorAssemblyContext The predecessor component to connect with
 * @return The new SinkPort deployed and connected to the predecessor.
 */
helper SinkPort_create(	sourceRole : SourceRole,
								sinkRole : SinkRole,
								predecessorRequiredRole : OperationRequiredRole,
								inout system : System,
								allocation : Allocation,
								resourceContainer : ResourceContainer,
								predecessorAssemblyContext : AssemblyContext) : AssemblyContext {

	// create the component
	var component : BasicComponent = SinkPort_createComponent(sourceRole,sinkRole,predecessorRequiredRole);
	
	// this component provides only one role so we can pick this
	var providedRole : OperationProvidedRole = component.providedRoles_InterfaceProvidingEntity
												->select(opr|opr.oclIsTypeOf(OperationProvidedRole))
												->oclAsType(OperationProvidedRole)
												->any(true);
	
																	
	// Connector and Context
	var assemblyConnector := Commons_deployAndConnect(	providedRole,
														predecessorRequiredRole,
														predecessorAssemblyContext,
														system,
														allocation,
														resourceContainer);
								
	return assemblyConnector.providingAssemblyContext_AssemblyConnector;
}

/**
 * Create the SinkPort component in the repository.
 *
 * @param sourceRole				The source role this component is about
 * @param sinkRole					The sink role this component is about
 * @param predecessorRequiredRole	The required role this component should be able to servce
 * @return the prepared basic component
 */
helper SinkPort_createComponent (	sourceRole : SourceRole,
										sinkRole : SinkRole,
										predecessorRequiredRole : OperationRequiredRole) : BasicComponent {
	
	// create basic component
	var basicComponent : BasicComponent = Commons_createBasicComponent('SinkPort_'+sourceRole.entityName+'_'+sinkRole.entityName+Commons_getUniqueElementNameSuffix(),
															sourceRole.eventGroup__SourceRole.repository__Interface);
															
	var interfaceToProvide := predecessorRequiredRole.requiredInterface__OperationRequiredRole;
	
	// create required role
	var requiredRole : OperationRequiredRole = Commons_createOperationRequiredRole(	'OperationRequiredRole_SinkPort'+Commons_getUniqueElementNameSuffix(),
																						basicComponent,
																						interfaceToProvide);
	basicComponent.requiredRoles_InterfaceRequiringEntity += requiredRole->asSet();


	// create provided role
	var providedRole : OperationProvidedRole = Commons_createOperationProvidedRole(	'OperationProvidedRole'+Commons_getUniqueElementNameSuffix(),
																						basicComponent,
																						interfaceToProvide);
	basicComponent.providedRoles_InterfaceProvidingEntity += providedRole->asSet();
	
	// create seffs
	basicComponent.serviceEffectSpecifications__BasicComponent := interfaceToProvide.signatures__OperationInterface
																	->SEFFUtil_createForwardingSEFF(basicComponent,requiredRole);	
	
	
	return basicComponent;
}