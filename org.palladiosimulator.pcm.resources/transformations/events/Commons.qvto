modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.1';
modeltype PCM_REP uses 'http://palladiosimulator.org/PalladioComponentModel/Repository/5.1';
modeltype PCM_SEFF uses 'http://palladiosimulator.org/PalladioComponentModel/SEFF/5.1';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.1';
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.1';
modeltype PCM_RES_TYPE uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceType/5.1';
modeltype PCM_USAGE uses 'http://palladiosimulator.org/PalladioComponentModel/UsageModel/5.1';
modeltype PCM_FEATURE_CONF uses 'http://sdq.ipd.uka.de/FeatureConfig/2.0';
modeltype PCM_FEATURE_MOD uses 'http://sdq.ipd.uka.de/FeatureModel/2.0';
modeltype PCM_CORE uses 'http://palladiosimulator.org/PalladioComponentModel/Core/5.1';
modeltype PCM_COMP uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Composition/5.1';
modeltype PCM_ENTITY uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Entity/5.1';
modeltype PCM_PARAM uses 'http://palladiosimulator.org/PalladioComponentModel/Parameter/5.1';
modeltype PCM_STOEX uses 'http://sdq.ipd.uka.de/StochasticExpressions/2.2';

/**
 * Library with utilities to find elements.
 *
 * @author Benjamin Klatt
 */
library Commons();

/** Counter to ensure individual element names */
property commonsElementCounter : Integer = 0;

/** Counter to ensure individual element names */
property counter : Integer = 0;

/** 
 * Get an element suffix id to prevent duplicate element names.
 * @return An unique string that can be used as unique name suffix.
 */
helper Commons_getUniqueElementNameSuffix() : String {
	commonsElementCounter := commonsElementCounter + 1;
	return ("_" + commonsElementCounter.toString());
}

/** 
 * Get an element suffix id to prevent duplicate element names.
 * @return An unique string that can be used as unique name suffix.
 */
helper Commons_getValue() : String {
	counter := counter + 1;
	return (counter.toString());
}

/**
 * Create the assembly context in allignment to an existing assembly context.
 *
 * Wrapper to the more detailed createAssemblyContext method
 *
 * @param component 		The repository component to assembly.
 * @param templateContext	The assembly context to be used as template.
 * @param system			The system to add the assembly to.
 * @param allocation		The allocation this context should belong to.
 * @param resourceContainer	The resource container to deploy on.
 * @return The new assembly context for the component
 */
helper Commons_createAssemblyContext(	component : RepositoryComponent , 
										templateContext : AssemblyContext,
										inout system : System,
										allocation : Allocation,
										resourceContainer : ResourceContainer) : AssemblyContext {
	
	var assemblyContext := Commons_createAssemblyContext(	component,
									templateContext.parentStructure__AssemblyContext,
									templateContext.configParameterUsages__AssemblyContext,
									system,
									allocation,
									resourceContainer);
											
	return assemblyContext;
}

/**
 * Create an assembly context. 
 *
 * Based on the uniqueContext, this mapping ensures that a 
 * component can be deployed multiple times with the same parameters
 * but only once per uniqueContext.
 *
 * The aligned helper is used internally.
 * 
 *
 * @param component 			The repository component to assembly.
 * @param parentStructure		The the parent structure of the assembly context.
 * @param componentVariables	The component configuration variables.
 * @param system				The system to add the assembly to.
 * @param allocation			The allocation this context should belong to.
 * @param resourceContainer		The resource container to deploy on.
 * @return The new assembly context for the component
 */
mapping Commons_createAssemblyContext(	uniqueContext : AssemblyContext,
										component : RepositoryComponent , 
										parentStructure : ComposedStructure,
										componentVariables : Set(VariableUsage), 
										inout system : System,
										allocation : Allocation,
										resourceContainer : ResourceContainer) : AssemblyContext {
	
	init {
		log('deployed component for context ', uniqueContext);
	}
	
	entityName := component.entityName+'_AssemblyContext'+Commons_getUniqueElementNameSuffix();
	encapsulatedComponent__AssemblyContext := component;
	parentStructure__AssemblyContext := parentStructure;
	configParameterUsages__AssemblyContext := componentVariables;
	
	end {
		// link the assembly context in the system
		system.assemblyContexts__ComposedStructure += result;
		
		// allocate the assembly	
		Commons_createAllocationContext(	result,
											allocation,
											resourceContainer);
	}
}
/**
 * Create the assembly context for a component. 
 *
 * While this is a helper, it is possibel to instantiate a component multiple times
 * with the same parameters.
 *
 * @param component 			The repository component to assembly.
 * @param parentStructure		The the parent structure of the assembly context.
 * @param componentVariables	The component configuration variables.
 * @param system				The system to add the assembly to.
 * @param allocation			The allocation this context should belong to.
 * @param resourceContainer		The resource container to deploy on.
 * @return The new assembly context for the component
 */
helper Commons_createAssemblyContext(	component : RepositoryComponent , 
										parentStructure : ComposedStructure,
										componentVariables : Set(VariableUsage), 
										inout system : System,
										allocation : Allocation,
										resourceContainer : ResourceContainer) : AssemblyContext {
	
	var assemblyContext := object AssemblyContext {
		entityName := component.entityName+'_AssemblyContext'+Commons_getUniqueElementNameSuffix();
		encapsulatedComponent__AssemblyContext := component;
		parentStructure__AssemblyContext := parentStructure;
		configParameterUsages__AssemblyContext := componentVariables;
	};

	// link the assembly context in the system
	system.assemblyContexts__ComposedStructure += assemblyContext;
	
	// allocate the assembly	
	Commons_createAllocationContext(	assemblyContext,
											allocation,
											resourceContainer);
											
	return assemblyContext;
}



/**
 * Create the assembly and allocation context for the SourcePortComponent
 * and the assembly connector between the source and the source port.
 *
 * @param connectorName	The name of the new connector
 * @param providedRole	The provided role to connect
 * @param requiredRole 	The required role to connect
 * @return The prepared assembly connector
 */
helper Commons_deployAndConnect(	providedRole : OperationProvidedRole,
									requiredRole : OperationRequiredRole,
									fromAssemblyContext: AssemblyContext,
									inout system : System,
									allocation : Allocation,
									resourceContainer : ResourceContainer) : AssemblyConnector {
	
		// get the source port component to be connected
		var component := providedRole.providingEntity_ProvidedRole[RepositoryComponent]->any(true);
		
		// create the source port assembly context
		var toAssemblyContext := Commons_createAssemblyContext(	component, 
																fromAssemblyContext, 
																system,
																allocation,
																resourceContainer);
									
	// create the connector
	var  assemblyConnector := Commons_connect(	fromAssemblyContext,
												toAssemblyContext,
												providedRole, 
												requiredRole);
	
	// assign the coonector to the system when it is prepared
	system.connectors__ComposedStructure += assemblyConnector;
	
	return assemblyConnector;
}

/**
 * Create the assembly connector between two assembly respectivly their roles.
 *
 * @param fromAssemblyContext	The from context.
 * @param toAssemblyContext		The to context.
 * @param providedRole			The provided role.
 * @param requiredRole			The required role.
 * @return The resulting connector.
 */
helper Commons_connect(	fromAssemblyContext: AssemblyContext,
						toAssemblyContext: AssemblyContext,
						providedRole : OperationProvidedRole,
						requiredRole : OperationRequiredRole) : AssemblyConnector {
		// create the connector
	var  assemblyConnector := object AssemblyConnector {
		entityName := 'AssemblyConnector_'+fromAssemblyContext.entityName+'_to_'+providedRole.providingEntity_ProvidedRole.entityName+Commons_getUniqueElementNameSuffix();
		requiringAssemblyContext_AssemblyConnector := fromAssemblyContext;
		providingAssemblyContext_AssemblyConnector := toAssemblyContext;
		providedRole_AssemblyConnector := providedRole;
		requiredRole_AssemblyConnector := requiredRole;
		parentStructure__Connector := fromAssemblyContext.parentStructure__AssemblyContext;
	};
	return assemblyConnector;
}

/**
 * Create the new allocation context for an assembly.
 * The context is build according to an existing template assembly context.
 * @param assemblyToAllocate The Assembly Context to be allocated
 * @param allocation The allocation to add the new context to
 * @param resourceContainer The resource container the assembly should be deployed on
 * @return The newly created allocation context.
 */
helper Commons_createAllocationContext(	assemblyToAllocate : AssemblyContext, 
										allocation : Allocation,
										resourceContainer : ResourceContainer) : AllocationContext {
	
	var allocationContext := object AllocationContext {
		entityName := 'AssemblyContext_'+assemblyToAllocate.entityName;
		assemblyContext_AllocationContext := assemblyToAllocate;
		allocation_AllocationContext := allocation;
		resourceContainer_AllocationContext := resourceContainer;
	};
	
	return allocationContext;
}

/**
 * Create a basic component
 * 
 * @param name 			The name of the component
 * @param repository 	The repository to assign this component to
 * @return the prepared component
 */
helper Commons_createBasicComponent ( 	name : String,
										repository : Repository ) : BasicComponent {				
	var component := object BasicComponent {	
		entityName := name;
		repository__RepositoryComponent := repository;
	};
	return component;
}

/**
 * Create the OperationRequiredRole between an operation interface and a requiring entity
 * @param interface 		The operation interface to reference to
 * @param requiringEntity 	The requiring entity
 */
mapping Commons_createOperationRequiredRole(interface : OperationInterface,
											sourceRole : SourceRole) : OperationRequiredRole {
	// build the operation required role
	// var role := object OperationRequiredRole {
		entityName := 'SourceRole'+sourceRole.entityName;
		requiredInterface__OperationRequiredRole := interface;
		requiringEntity_RequiredRole := sourceRole.requiringEntity_RequiredRole;
	// };
	//return role;
}

/**
 * Create the OperationRequiredRole between an operation interface and a requiring entity
 * @param interface 		The operation interface to reference to
 * @param requiringEntity 	The requiring entity
 */
helper Commons_createOperationRequiredRole(	name : String,
											entity : InterfaceRequiringEntity, 
											interface : OperationInterface) : OperationRequiredRole {
	// build the operation required role
	var role := object OperationRequiredRole {
		entityName := name;
		requiredInterface__OperationRequiredRole := interface;
		requiringEntity_RequiredRole := entity;
	};
	return role;
}


/**
 * Create the operation providing role for a source port
 * @param component The providing compoenent
 * @param interface The provided interface
 * @return The prepared operation provided role
 */
helper Commons_createOperationProvidedRole(	name : String,
											entity : InterfaceProvidingEntity , 
											interface : OperationInterface) : OperationProvidedRole {
	var role := object OperationProvidedRole {										
		entityName := name;
		providedInterface__OperationProvidedRole := interface;
		providingEntity_ProvidedRole := entity;
	};
	return role;
}

/**
 * Get an operation required role of a component encapsulated by an assembly
 * context that references a specific operation interface.
 *
 * @param assemblyContext	The context to get the component from
 * @param interface			The operation interface that must be referenced
 * @return the found role
 */
query Commons_getOperationRequiredRole(	assemblyContext : AssemblyContext, 
										interface : OperationInterface) : OperationRequiredRole {
		var operationRequiredRole := assemblyContext
					.encapsulatedComponent__AssemblyContext
					.requiredRoles_InterfaceRequiringEntity
					->select(rr|rr.oclIsTypeOf(OperationRequiredRole))
					->oclAsType(OperationRequiredRole)
					->select(opr|opr.requiredInterface__OperationRequiredRole = interface)
					->any(true);
					
		return operationRequiredRole;
}

/**
 * Get the providing component for an operation providing role
 * @param role The provided role.
 * @return The providing component.
 */
query Commons_getProvidingComponent(role : ProvidedRole) : RepositoryComponent {
	return role.providingEntity_ProvidedRole
				->oclAsType(RepositoryComponent)
				->any(true);
}

/**
 * Get a list of variable characterisation types someone could iterate over.
 * @return The set of availabel characterization types
 */
query Commons_getListOfVariableCharacterisationTypes() : Set(VariableCharacterisationType) {
	
	var types : Set(VariableCharacterisationType) = Set{};
	
	types+= VariableCharacterisationType::STRUCTURE;
	types+= VariableCharacterisationType::NUMBER_OF_ELEMENTS;
	types+= VariableCharacterisationType::VALUE;
	types+= VariableCharacterisationType::BYTESIZE;
	types+= VariableCharacterisationType::TYPE;
	
	return types;
}