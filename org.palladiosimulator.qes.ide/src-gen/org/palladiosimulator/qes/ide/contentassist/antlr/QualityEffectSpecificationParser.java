/*
 * generated by Xtext 2.13.0
 */
package org.palladiosimulator.qes.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.palladiosimulator.qes.ide.contentassist.antlr.internal.InternalQualityEffectSpecificationParser;
import org.palladiosimulator.qes.services.QualityEffectSpecificationGrammarAccess;

public class QualityEffectSpecificationParser extends AbstractContentAssistParser {

	@Inject
	private QualityEffectSpecificationGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalQualityEffectSpecificationParser createParser() {
		InternalQualityEffectSpecificationParser result = new InternalQualityEffectSpecificationParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getComponentPropertyAccess().getAlternatives(), "rule__ComponentProperty__Alternatives");
					put(grammarAccess.getRolePropertyAccess().getAlternatives(), "rule__RoleProperty__Alternatives");
					put(grammarAccess.getResourcePropertyAccess().getAlternatives(), "rule__ResourceProperty__Alternatives");
					put(grammarAccess.getTransformationSpecificationAccess().getAlternatives(), "rule__TransformationSpecification__Alternatives");
					put(grammarAccess.getComponentTypeAccess().getAlternatives(), "rule__ComponentType__Alternatives");
					put(grammarAccess.getRoleTypeAccess().getAlternatives(), "rule__RoleType__Alternatives");
					put(grammarAccess.getAssemblyTypeAccess().getAlternatives(), "rule__AssemblyType__Alternatives");
					put(grammarAccess.getTransformationTypeAccess().getAlternatives(), "rule__TransformationType__Alternatives");
					put(grammarAccess.getQESAccess().getGroup(), "rule__QES__Group__0");
					put(grammarAccess.getComponentSpecificationAccess().getGroup(), "rule__ComponentSpecification__Group__0");
					put(grammarAccess.getNameAccess().getGroup(), "rule__Name__Group__0");
					put(grammarAccess.getIdentifierAccess().getGroup(), "rule__Identifier__Group__0");
					put(grammarAccess.getAnnotationAccess().getGroup(), "rule__Annotation__Group__0");
					put(grammarAccess.getTypeAccess().getGroup(), "rule__Type__Group__0");
					put(grammarAccess.getRoleAccess().getGroup(), "rule__Role__Group__0");
					put(grammarAccess.getAssemblyAccess().getGroup(), "rule__Assembly__Group__0");
					put(grammarAccess.getResourceAccess().getGroup(), "rule__Resource__Group__0");
					put(grammarAccess.getNQAAccess().getGroup(), "rule__NQA__Group__0");
					put(grammarAccess.getReasoningAccess().getGroup(), "rule__Reasoning__Group__0");
					put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
					put(grammarAccess.getEntryAccess().getGroup(), "rule__Entry__Group__0");
					put(grammarAccess.getNumericValueAccess().getGroup(), "rule__NumericValue__Group__0");
					put(grammarAccess.getModelAccess().getSpecificationsAssignment(), "rule__Model__SpecificationsAssignment");
					put(grammarAccess.getQESAccess().getComponentsAssignment_1(), "rule__QES__ComponentsAssignment_1");
					put(grammarAccess.getQESAccess().getTransformationsAssignment_4(), "rule__QES__TransformationsAssignment_4");
					put(grammarAccess.getComponentSpecificationAccess().getPropertiesAssignment_1(), "rule__ComponentSpecification__PropertiesAssignment_1");
					put(grammarAccess.getNameAccess().getNotAssignment_1(), "rule__Name__NotAssignment_1");
					put(grammarAccess.getNameAccess().getNameAssignment_2(), "rule__Name__NameAssignment_2");
					put(grammarAccess.getIdentifierAccess().getNotAssignment_1(), "rule__Identifier__NotAssignment_1");
					put(grammarAccess.getIdentifierAccess().getIdAssignment_2(), "rule__Identifier__IdAssignment_2");
					put(grammarAccess.getAnnotationAccess().getNotAssignment_1(), "rule__Annotation__NotAssignment_1");
					put(grammarAccess.getAnnotationAccess().getAnnotationAssignment_2(), "rule__Annotation__AnnotationAssignment_2");
					put(grammarAccess.getTypeAccess().getNotAssignment_1(), "rule__Type__NotAssignment_1");
					put(grammarAccess.getTypeAccess().getTypeAssignment_2(), "rule__Type__TypeAssignment_2");
					put(grammarAccess.getRoleAccess().getNotAssignment_1(), "rule__Role__NotAssignment_1");
					put(grammarAccess.getRoleAccess().getTypeAssignment_2(), "rule__Role__TypeAssignment_2");
					put(grammarAccess.getRoleAccess().getPropertiesAssignment_3(), "rule__Role__PropertiesAssignment_3");
					put(grammarAccess.getAssemblyAccess().getNotAssignment_1(), "rule__Assembly__NotAssignment_1");
					put(grammarAccess.getAssemblyAccess().getTypeAssignment_2(), "rule__Assembly__TypeAssignment_2");
					put(grammarAccess.getAssemblyAccess().getComponentsAssignment_3(), "rule__Assembly__ComponentsAssignment_3");
					put(grammarAccess.getResourceAccess().getPropertiesAssignment_1(), "rule__Resource__PropertiesAssignment_1");
					put(grammarAccess.getNQAAccess().getQualityAssignment_1(), "rule__NQA__QualityAssignment_1");
					put(grammarAccess.getNQAAccess().getTypeAssignment_2(), "rule__NQA__TypeAssignment_2");
					put(grammarAccess.getNQAAccess().getElementAssignment_3(), "rule__NQA__ElementAssignment_3");
					put(grammarAccess.getReasoningAccess().getQualityAssignment_1(), "rule__Reasoning__QualityAssignment_1");
					put(grammarAccess.getReasoningAccess().getRulesAssignment_3(), "rule__Reasoning__RulesAssignment_3");
					put(grammarAccess.getRuleAccess().getQualitiesAssignment_1(), "rule__Rule__QualitiesAssignment_1");
					put(grammarAccess.getRuleAccess().getEntriesAssignment_3(), "rule__Rule__EntriesAssignment_3");
					put(grammarAccess.getEntryAccess().getKeyAssignment_1(), "rule__Entry__KeyAssignment_1");
					put(grammarAccess.getEntryAccess().getValueAssignment_3(), "rule__Entry__ValueAssignment_3");
					put(grammarAccess.getNumericValueAccess().getValueTypeAssignment_0(), "rule__NumericValue__ValueTypeAssignment_0");
					put(grammarAccess.getNumericValueAccess().getTransformationTypeAssignment_2(), "rule__NumericValue__TransformationTypeAssignment_2");
					put(grammarAccess.getNumericValueAccess().getTransformationNumberAssignment_3(), "rule__NumericValue__TransformationNumberAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public QualityEffectSpecificationGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(QualityEffectSpecificationGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
