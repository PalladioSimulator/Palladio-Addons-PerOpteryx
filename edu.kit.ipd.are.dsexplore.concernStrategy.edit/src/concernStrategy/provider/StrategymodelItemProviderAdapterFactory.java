/**
 */
package concernStrategy.provider;

import concernStrategy.util.StrategymodelAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class StrategymodelItemProviderAdapterFactory extends StrategymodelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public StrategymodelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link concernStrategy.Feature} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureItemProvider featureItemProvider;

	/**
	 * This creates an adapter for a {@link concernStrategy.Feature}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createFeatureAdapter() {
		if (featureItemProvider == null) {
			featureItemProvider = new FeatureItemProvider(this);
		}

		return featureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link concernStrategy.Simple} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleItemProvider simpleItemProvider;

	/**
	 * This creates an adapter for a {@link concernStrategy.Simple}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createSimpleAdapter() {
		if (simpleItemProvider == null) {
			simpleItemProvider = new SimpleItemProvider(this);
		}

		return simpleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link concernStrategy.FeatureGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureGroupItemProvider featureGroupItemProvider;

	/**
	 * This creates an adapter for a {@link concernStrategy.FeatureGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createFeatureGroupAdapter() {
		if (featureGroupItemProvider == null) {
			featureGroupItemProvider = new FeatureGroupItemProvider(this);
		}

		return featureGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link concernStrategy.FeatureDiagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureDiagramItemProvider featureDiagramItemProvider;

	/**
	 * This creates an adapter for a {@link concernStrategy.FeatureDiagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createFeatureDiagramAdapter() {
		if (featureDiagramItemProvider == null) {
			featureDiagramItemProvider = new FeatureDiagramItemProvider(this);
		}

		return featureDiagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link concernStrategy.RequiredConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequiredConstraintItemProvider requiredConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link concernStrategy.RequiredConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createRequiredConstraintAdapter() {
		if (requiredConstraintItemProvider == null) {
			requiredConstraintItemProvider = new RequiredConstraintItemProvider(this);
		}

		return requiredConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link concernStrategy.ProhibitsConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProhibitsConstraintItemProvider prohibitsConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link concernStrategy.ProhibitsConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createProhibitsConstraintAdapter() {
		if (prohibitsConstraintItemProvider == null) {
			prohibitsConstraintItemProvider = new ProhibitsConstraintItemProvider(this);
		}

		return prohibitsConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link concernStrategy.IntegerIntervalRange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerIntervalRangeItemProvider integerIntervalRangeItemProvider;

	/**
	 * This creates an adapter for a {@link concernStrategy.IntegerIntervalRange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createIntegerIntervalRangeAdapter() {
		if (integerIntervalRangeItemProvider == null) {
			integerIntervalRangeItemProvider = new IntegerIntervalRangeItemProvider(this);
		}

		return integerIntervalRangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link concernStrategy.ContinousIntervalRange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContinousIntervalRangeItemProvider continousIntervalRangeItemProvider;

	/**
	 * This creates an adapter for a {@link concernStrategy.ContinousIntervalRange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createContinousIntervalRangeAdapter() {
		if (continousIntervalRangeItemProvider == null) {
			continousIntervalRangeItemProvider = new ContinousIntervalRangeItemProvider(this);
		}

		return continousIntervalRangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link concernStrategy.IntegerAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerAttributeItemProvider integerAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link concernStrategy.IntegerAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createIntegerAttributeAdapter() {
		if (integerAttributeItemProvider == null) {
			integerAttributeItemProvider = new IntegerAttributeItemProvider(this);
		}

		return integerAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link concernStrategy.DoubleAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DoubleAttributeItemProvider doubleAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link concernStrategy.DoubleAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDoubleAttributeAdapter() {
		if (doubleAttributeItemProvider == null) {
			doubleAttributeItemProvider = new DoubleAttributeItemProvider(this);
		}

		return doubleAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link concernStrategy.StringAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringAttributeItemProvider stringAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link concernStrategy.StringAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createStringAttributeAdapter() {
		if (stringAttributeItemProvider == null) {
			stringAttributeItemProvider = new StringAttributeItemProvider(this);
		}

		return stringAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link concernStrategy.ExternalObjectAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExternalObjectAttributeItemProvider externalObjectAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link concernStrategy.ExternalObjectAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createExternalObjectAttributeAdapter() {
		if (externalObjectAttributeItemProvider == null) {
			externalObjectAttributeItemProvider = new ExternalObjectAttributeItemProvider(this);
		}

		return externalObjectAttributeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (featureItemProvider != null) featureItemProvider.dispose();
		if (simpleItemProvider != null) simpleItemProvider.dispose();
		if (featureGroupItemProvider != null) featureGroupItemProvider.dispose();
		if (featureDiagramItemProvider != null) featureDiagramItemProvider.dispose();
		if (requiredConstraintItemProvider != null) requiredConstraintItemProvider.dispose();
		if (prohibitsConstraintItemProvider != null) prohibitsConstraintItemProvider.dispose();
		if (integerIntervalRangeItemProvider != null) integerIntervalRangeItemProvider.dispose();
		if (continousIntervalRangeItemProvider != null) continousIntervalRangeItemProvider.dispose();
		if (integerAttributeItemProvider != null) integerAttributeItemProvider.dispose();
		if (doubleAttributeItemProvider != null) doubleAttributeItemProvider.dispose();
		if (stringAttributeItemProvider != null) stringAttributeItemProvider.dispose();
		if (externalObjectAttributeItemProvider != null) externalObjectAttributeItemProvider.dispose();
	}

}
